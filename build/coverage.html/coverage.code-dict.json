{"/home/travis/build/npmtest/node-npmtest-lifx/test.js":"/* istanbul instrument in package npmtest_lifx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lifx/lib.npmtest_lifx.js":"/* istanbul instrument in package npmtest_lifx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lifx = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lifx = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lifx/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lifx && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lifx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lifx\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lifx.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_lifx.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lifx.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_lifx.__dirname + '/lib.npmtest_lifx.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lifx/node_modules/lifx/lifx.js":"var dgram  = require('dgram');\nvar net    = require('net');\nvar util   = require('util');\nvar events = require('events');\nvar clone  = require('clone');\nvar os     = require('os');\nvar _      = require('underscore');\nvar packet = require('./packet');\n\nvar port = 56700;\n\nvar debug = false;\n\nfunction init() {\n\tvar l = new Lifx();\n\tl.on('ready', function() {\n\t\tl.startDiscovery(1000);\n\t});\n\treturn l;\n}\n\nfunction Lifx() {\n\tevents.EventEmitter.call(this);\n\tthis.gateways = {};     // hash of gateway ids to gateway objects\n\tthis.bulbs = {};        // hash of bulb ids to bulb objects\n\tthis.udpClient = dgram.createSocket(\"udp4\");\n\tthis._intervalID = null;\n\tthis._localIPs = getMyIPs();\n\tthis._initNetwork();\n\tthis._setupPacketListener();\n\tthis._setupGatewayListener();\n}\nrequire('util').inherits(Lifx, require('events').EventEmitter);\n\nLifx.prototype._initNetwork = function() {\n\tvar self = this;\n\tthis.udpClient.on(\"error\", function (err) {\n\t\tconsole.error(\"*** UDP error \" + err);\n\t\tself.emit('error', err);\n\t});\n\tthis.udpClient.on(\"message\", function (msg, rinfo) {\n\t\t// Check it didn't come from us\n\t\tif (self._localIPs.indexOf(rinfo.address) > -1) {\n\t\t\treturn;\n\t\t}\n\t\tif (debug) console.log(\" U- \" + msg.toString(\"hex\"));\n\t\tvar pkt = packet.fromBytes(msg);\n\t\tself.emit('rawpacket', pkt, rinfo);\n\t});\n\tthis.udpClient.bind(port, \"0.0.0.0\", function() {\n\t\tself.udpClient.setBroadcast(true);\n\t\tself.emit('ready');\n\t});\n}\n\nLifx.prototype._sendPacket = function(dstIp, dstPort, packet) {\n\tif (debug) console.log(\" U+ \" + packet.toString(\"hex\"));\n\tthis.udpClient.send(packet, 0, packet.length, dstPort, dstIp, function(err, bytes) {/* jshint unused: false */\n\t});\n}\n\nLifx.prototype.startDiscovery = function(interval) {\n\t// Now send the discovery packets\n\tvar self = this;\n\tthis._intervalID = setInterval(function() {\n\t\tself._sendPacket(\"255.255.255.255\", port, packet.getPanGateway());\n\t}, interval);\n};\n\nLifx.prototype.stopDiscovery = function() {\n\tclearInterval(this._intervalID);\n};\n\nLifx.prototype._setupPacketListener = function() {\n\tvar self = this;\n\n\tthis.on('rawpacket', function(pkt, rinfo) {\n                var bulb, found = false, i;\n\n\t\tswitch (pkt.packetTypeShortName) {\n\n\t\t\tcase 'panGateway':\n\t\t\t\t// Got a notification of a gateway.  Check if it's new, using valid UDP, and if it is then handle accordingly\n\t\t\t\tif (pkt.payload.service == 1 && pkt.payload.port > 0) {\n\t\t\t\t\tvar gw = {ip:rinfo.address, port:pkt.payload.port, site:pkt.preamble.site, \n\t\t\t\t\t\t\tservice: pkt.payload.service,\n\t\t\t\t\t\t\tprotocol: pkt.preamble.protocol,\n\t\t\t\t\t\t\tbulbAddress: pkt.preamble.bulbAddress.toString(\"hex\")\n\t\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tif (!self.gateways[gw.ip]) {\n\t\t\t\t\t\t//console.log(JSON.stringify(gw));\n\t\t\t\t\t\tself.gateways[gw.ip] = gw;\n\t\t\t\t\t\tself.emit('gateway', gw);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'lightStatus':\n\t\t\t\t// Got a notification of a light's status.  Check if it's a new light, and handle it accordingly.\n\t\t\t\tvar bulb = self.bulbs[pkt.preamble.bulbAddress.toString('hex')];\n\t\t\t\tif (bulb) {\n\t\t\t\t\tbulb.state = pkt.payload;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbulb = {addr:pkt.preamble.bulbAddress, name:pkt.payload.bulbLabel, state: pkt.payload};\n\t\t\t\t\tself.bulbs[bulb.addr.toString('hex')] = bulb;\n\t\t\t\t\tself.emit('bulb', bulb);\n\t\t\t\t}\n\n\t\t\t\t// Even if it's not new, emit updated info about the state of the bulb\n                                bulb.state = { hue:        pkt.payload.hue,\n                                               saturation: pkt.payload.saturation,\n                                               brightness: pkt.payload.brightness,\n                                               kelvin:     pkt.payload.kelvin,\n                                               dim:        pkt.payload.dim,\n                                               power:      pkt.payload.power,\n                                             };\n\t\t\t\tself.emit('bulbstate', bulb);\n\t\t\t\tbreak;\n\n\t\t\tcase 'powerState':\n\t\t\t\tbulb = {addr:pkt.preamble.bulbAddress, state: {power: pkt.payload.onoff}}\n\t\t\t\tself.emit('bulbpower', bulb);\n\t\t\t\tbreak;\n\n\t\t\tcase 'bulbLabel':\n\t\t\t\tbulb = {addr:pkt.preamble.bulbAddress, name:pkt.payload.label}\n\t\t\t\tself.emit('bulblabel', bulb);\n\t\t\t\tbreak;\n\n\t\t\tcase 'getPanGateway':\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif (debug) {\n\t\t\t\t\tconsole.log('Unhandled packet of type ['+pkt.packetTypeShortName+']');\n\t\t\t\t\tconsole.log(pkt.payload);\n\t\t\t\t}\n\t\t\t\tself.emit('packet', pkt);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n};\n\nLifx.prototype._setupGatewayListener = function() {\n\tvar self = this;\n\tself.on('gateway', function(gw) {\n\t\t// Ask the gateway for new bulbs\n\t\tself._sendPacket(gw.ip, gw.port, packet.getLightState({site:gw.site}));\n\n\t\t// Also slow down the discovery packets, to be polite to the network\n\t\tself.stopDiscovery();\n\t\tself.startDiscovery(10000);\n\t});\n};\n\nLifx.prototype.close = function() {\n\t// Remove things from the event loop and clean up\n\tthis.stopDiscovery();\n\tthis.udpClient.close();\n};\n\nLifx.prototype._sendToOneOrAll = function(command, bulb) {\n\tvar self = this;\n\t\n//\tvar gw = this.gateways[\"192.168.0.103\"];\n\t\n\tvar bulbAddress = null;\n\n\tif (typeof bulb != 'undefined') {\n\t\t// Overwrite the bulb address here\n\t\tif (Buffer.isBuffer(bulb)) {\n\t\t\tbulbAddress = bulb;\n\t\t} else if (typeof bulb.addr != 'undefined') {\n\t\t\tbulbAddress = bulb.addr;\n\t\t} else {\n\t\t\t// Check if it's a hex string of a known bulb addr\n\t\t\tvar b = self.bulbs[bulb]\n\t\t\tif (b) {\n\t\t\t\tbulbAddress = b.addr;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"Unknown bulb: \" + bulb;\n\t\t\t}\n\t\t}\n\t\tbulbAddress.copy(command, 8);\n\t}\n\n\t_(this.gateways).each(function(gw, ip) {\n\t\tvar siteAddress = gw.site;\n\t\tsiteAddress.copy(command, 16);\n\t\tself._sendPacket(gw.ip, gw.port, command);\n\t});\n};\n\nLifx.prototype.sendToAll = function(command) {\n\tthis._sendToOneOrAll(command);\n};\n\nLifx.prototype.sendToOne = function(command, bulb) {\n\tthis._sendToOneOrAll(command, bulb);\n};\n\n/////////// Fun methods ////////////\n\n// Turn lights on\nLifx.prototype.lightsOn = function(bulb) {\n\tthis._sendToOneOrAll(packet.setPowerState({onoff:0xff, protocol: 0x1400}), bulb);\n};\n\n// Turn lights off\nLifx.prototype.lightsOff = function(bulb) {\n\tthis._sendToOneOrAll(packet.setPowerState({onoff:0, protocol: 0x1400}), bulb);\n};\n\n// Set bulbs to a particular colour\n// Pass in 16-bit numbers for each param - they will be byte shuffled as appropriate\nLifx.prototype.lightsColour = function(hue, sat, lum, whitecol, timing, bulb) {\n\tvar params = {stream:0, hue:hue, saturation:sat, brightness:lum, kelvin:whitecol, fadeTime:timing};\n\tvar message = packet.setLightColour(params);\n\tthis._sendToOneOrAll(message, bulb);\n};\n\n// Request status from bulbs\nLifx.prototype.requestStatus = function() {\n\tthis._sendToOneOrAll(packet.getLightState());\n};\n\nmodule.exports = {\n\tinit:init,\n        packet:packet,\n\tsetDebug:function(d){debug=d;}\n};\n\n// Utility method to get a list of local IP addresses\nfunction getMyIPs() {\n\tvar ips = [];\n\tvar ifs = os.networkInterfaces();\n\tfor (var i in ifs) {\n\t\tfor (var j in ifs[i]) {\n\t\t\tips.push(ifs[i][j].address);\n\t\t}\n\t}\n\treturn ips;\n}\n","/home/travis/build/npmtest/node-npmtest-lifx/node_modules/lifx/packet.js":"packet = {\n}\n\npacket.polyfill = function() {\n\tfor (var i in packets) {\n\t\tvar pkt = packets[i];\n\t\tpacket[pkt.shortname] = function(pkt) {\n\t\t\treturn function(p) {\n\t\t\t\tif (typeof p != 'object') {\n\t\t\t\t\tp = {};\n\t\t\t\t}\n\t\t\t\tp.type = pkt.shortname;\n\t\t\t\treturn packet.fromParams(p);\n\t\t\t};\n\t\t}(pkt);\n\t}\n}\n\npacket.fromBytes = function(b) {\n\tvar newPacket = {preamble:{}, payload:{}};\n\n\t// First parse the preamble\n\tvar runningPlace = 0;\n\tfor (var i=0; i<preambleFields.length; i++) {\n\t\tvar f = preambleFields[i];\n\t\tnewPacket.preamble[f.name] = f.type.parse(b, runningPlace);\n\t\trunningPlace += f.type.size;\n\t}\n\n\t// Now parse the packet-specific bytes\n\tvar pParser = packets[newPacket.preamble.packetType];\n\tif (typeof pParser == 'undefined') {\n\t\tconsole.log(\"Unknown packet type \"+newPacket.preamble.packetType);\n\t} else {\n\t\tnewPacket.packetTypeName = pParser.name;\n\t\tnewPacket.packetTypeShortName = pParser.shortname;\n\t\tfor (var i=0; i<pParser.fields.length; i++) {\n\t\t\tvar f = pParser.fields[i];\n\t\t\tnewPacket.payload[f.name] = f.type.parse(b, runningPlace);\n\t\t\trunningPlace += f.type.size;\n\t\t}\n\t}\n\n\treturn newPacket;\n};\n\npacket.fromParams = function(p) {\n\tif (typeof p.type == 'undefined') {\n\t\tconsole.log(\"Unknown packet type requested\");\n\t\treturn;\n\t}\n\n\tvar pParser;\n\tfor (var i in packets) {\n\t\tif (packets[i].shortname == p.type) {\n\t\t\tpParser = packets[i];\n\t\t\tpParser.packetType = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tvar newPacket = new Buffer(36 + pParser.length);\n\tvar newPacketPayload = newPacket.slice(36);\n\n\t// Generate packet-specific data\n\tvar runningPlace = 0;\n\tfor (var i=0; i<pParser.fields.length; i++) {\n\t\tpParser.fields[i].type.unparse(newPacketPayload, runningPlace, p[pParser.fields[i].name]);\n\t\trunningPlace += pParser.fields[i].type.size;\n\t}\n\t\n\t// Generate preamble\n\tvar runningPlace = 0;\n\tfor (var i=0; i<preambleFields.length; i++) {\n\t\tvar f = preambleFields[i];\n\t\tvar datum;\n\t\tswitch (f.name) {\n\t\t\tcase 'size':\n\t\t\t\tdatum = 36 + pParser.length;\n\t\t\t\tbreak;\n\t\t\tcase 'protocol':\n\t\t\t\tif (typeof p[f.name] == 'undefined') {\n//\t\t\t\t\tdatum = 0x5400;\n\t\t\t\t\tdatum = 0x3400;\n//\t\t\t\t\tdatum = 0x1400;\n\t\t\t\t} else {\n\t\t\t\t\tdatum = p[f.name];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'bulbAddress':\n\t\t\tcase 'site':\n\t\t\t\tif (typeof p[f.name] == 'undefined') {\n\t\t\t\t\tdatum = new Buffer([0,0,0,0,0,0]);\n\t\t\t\t} else {\n\t\t\t\t\tdatum = p[f.name];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'reserved1':\n\t\t\tcase 'reserved2':\n\t\t\tcase 'reserved3':\n\t\t\tcase 'reserved4':\n\t\t\tcase 'timestamp':\n\t\t\t\tdatum = new Buffer(f.type.size);\n\t\t\t\tdatum.fill(0);\n\t\t\t\tbreak;\n\t\t\tcase 'packetType':\n\t\t\t\tdatum = pParser.packetType;\n\t\t\t\tbreak;\n\t\t}\n\t\tf.type.unparse(newPacket, runningPlace, datum);\n\t\trunningPlace += f.type.size;\n\t}\n\treturn newPacket;\n};\n\ntype = {\n\tuint8: {\n\t\tsize: 1,\n\t\tparse: function(b, start) {\n\t\t\treturn b.readUInt8(start);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn b.writeUInt8(p, start);\n\t\t}\n\t},\n\tuint16: {\n\t\tsize: 2,\n\t\tparse: function(b, start) {\n\t\t\treturn b.readUInt16BE(start);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn b.writeUInt16BE(p, start);\n\t\t}\n\t},\n\tuint16_le: {\n\t\tsize: 2,\n\t\tparse: function(b, start) {\n\t\t\treturn b.readUInt16LE(start);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn b.writeUInt16LE(p, start);\n\t\t}\n\t},\n\tuint32: {\n\t\tsize: 4,\n\t\tparse: function(b, start) {\n\t\t\treturn b.readUInt32BE(start);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn b.writeUInt32BE(p, start);\n\t\t}\n\t},\n\tuint32_le: {\n\t\tsize: 4,\n\t\tparse: function(b, start) {\n\t\t\treturn b.readUInt32LE(start);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn b.writeUInt32LE(p, start);\n\t\t}\n\t},\n\tuint64: {\n\t\tsize: 8,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 8;\n\t\t\treturn b.slice(start, start+size);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn p.copy(b, start, 0, 8);\n\t\t}\n\t},\n\tuint64_le: { // TBD\n\t\tsize: 8,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 8;\n\t\t\treturn b.slice(start, start+size);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn p.copy(b, start, 0, 8);\n\t\t}\n\t},\n\tfloat_le: {\n\t\tsize: 4,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 4;\n\t\t\treturn b.readFloatLE(start);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn b.writeFloatLE(p, start);\n\t\t}\n\t},\n\tbyte2: {\n\t\tsize: 2,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 2;\n\t\t\treturn b.slice(start, start+size);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn p.copy(b, start, 0, 2);\n\t\t}\n\t},\n\tstring3: {\n\t\tsize: 3,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 3;\n\t\t\treturn b.slice(start, start+size).toString().replace(/\\0*$/, '');\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\tvar b2 = new Buffer(p);\n\t\t\treturn b2.copy(b, start, 0, 3);\n\t\t}\n\t},\n\tstring3_le: {\n\t\tsize: 3,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 3;\n\t\t\tvar be = b.slice(start, start+size).toString().replace(/\\0*$/, '');\n\t\t\tvar le = be.split(\"\").reverse().join(\"\"); // reverse the string\n\t\t\treturn le;\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\tvar b2 = new Buffer(p);\n\t\t\treturn b2.copy(b, start, 0, 3);\n\t\t}\n\t},\n\tbyte4: {\n\t\tsize: 4,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 4;\n\t\t\treturn b.slice(start, start+size);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn p.copy(b, start, 0, 4);\n\t\t}\n\t},\n\tbyte6: {\n\t\tsize: 6,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 6;\n\t\t\treturn b.slice(start, start+size);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn p.copy(b, start, 0, 6);\n\t\t}\n\t},\n\tbyte16: {\n\t\tsize: 16,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 16;\n\t\t\treturn b.slice(start, start+size);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn p.copy(b, start, 0, 16);\n\t\t}\n\t},\n\tbyte32: {\n\t\tsize: 32,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 32;\n\t\t\treturn b.slice(start, start+size);\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\treturn p.copy(b, start, 0, 32);\n\t\t}\n\t},\n\tstring32: {\n\t\tsize: 32,\n\t\tparse: function(b, start) {\n\t\t\tvar size = 32,  end = start + size, len;\n//\t\t\treturn b.slice(start, start+size).toString().replace(/\\0*$/, '');\n\n\t\t\tfor (len = start; len < end; len++) if (b[len] < 32) break;\n\t\t\treturn b.slice(start, len).toString();\n\t\t},\n\t\tunparse: function(b, start, p) {\n\t\t\tvar b2 = new Buffer(p);\n\t\t\treturn b2.copy(b, start, 0, 32);\n\t\t}\n\t}\n};\n\npreambleFields = [\n\t{ name: \"size\"       , type:type.uint16_le },\n\t{ name: \"protocol\"   , type:type.uint16_le },\n\t{ name: \"reserved1\"  , type:type.byte4 }    ,\n\t{ name: \"bulbAddress\", type:type.byte6 }    ,\n\t{ name: \"reserved2\"  , type:type.byte2 }    ,\n\t{ name: \"site\"       , type:type.byte6 }    ,\n\t{ name: \"reserved3\"  , type:type.byte2 }    ,\n\t{ name: \"timestamp\"  , type:type.uint64 }   ,\n\t{ name: \"packetType\" , type:type.uint16_le },\n\t{ name: \"reserved4\"  , type:type.byte2 }    ,\n];\n\npackets = {\n\t0x02: {\n\t\tname:\"Get PAN gateway\",\n\t\tshortname:\"getPanGateway\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x03: {\n\t\tname:\"PAN gateway\",\n\t\tshortname:\"panGateway\",\n\t\tlength:5,\n\t\tfields:[\n\t\t\t{name:\"service\", type:type.uint8}    ,\n\t\t\t{name:\"port\"   , type:type.uint32_le}\n\t\t]\n\t},\n\t0x04: {\n\t\tname:\"Get time\",\n\t\tshortname:\"getTime\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x05: {\n\t\tname:\"Set time\",\n\t\tshortname:\"setTime\",\n\t\tlength:8,\n\t\tfields:[\n\t\t\t{name:\"time\", type:type.uint64_le}\n\t\t]\n\t},\n\t0x06: {\n\t\tname:\"Time state\",\n\t\tshortname:\"timeState\",\n\t\tlength:8,\n\t\tfields:[\n\t\t\t{name:\"time\", type:type.uint64_le}\n\t\t]\n\t},\n\t0x07: {\n\t\tname:\"Get reset switch state\",\n\t\tshortname:\"getResetSwitchState\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x08: {\n\t\tname:\"Reset switch state\",\n\t\tshortname:\"resetSwitchState\",\n\t\tlength:2,\n\t\tfields:[\n\t\t\t{name:\"position\", type:type.uint8}\n\t\t]\n\t},\n\t0x0c: {\n\t\tname:\"Get mesh info\",\n\t\tshortname:\"getMeshInfo\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x0d: {\n\t\tname:\"Mesh info\",\n\t\tshortname:\"meshInfo\",\n\t\tlength:14,\n\t\tfields:[\n\t\t\t{name:\"signal\"        , type:type.float_le} ,\n\t\t\t{name:\"tx\"            , type:type.uint32_le},\n\t\t\t{name:\"rx\"            , type:type.uint32_le},\n\t\t\t{name:\"mcuTemperature\", type:type.uint16}\n\t\t]\n\t},\n\t0x0e: {\n\t\tname:\"Get mesh firmware\",\n\t\tshortname:\"getMeshFirmware\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x0f: {\n\t\tname:\"Mesh firmware\",\n\t\tshortname:\"meshFirmware\",\n\t\tlength:20,\n\t\tfields:[\n\t\t\t{name:\"build_second\"  , type:type.uint8},\n\t\t\t{name:\"build_minute\"  , type:type.uint8},\n\t\t\t{name:\"build_hour\"    , type:type.uint8},\n\t\t\t{name:\"build_day\"     , type:type.uint8},\n\t\t\t{name:\"build_month\"   , type:type.string3_le},\n\t\t\t{name:\"build_year\"    , type:type.uint8},\n\t\t\t{name:\"install_second\", type:type.uint8},\n\t\t\t{name:\"install_minute\", type:type.uint8},\n\t\t\t{name:\"install_hour\"  , type:type.uint8},\n\t\t\t{name:\"install_day\"   , type:type.uint8},\n\t\t\t{name:\"install_month\" , type:type.string3_le},\n\t\t\t{name:\"install_year\"  , type:type.uint8},\n\t\t\t{name:\"version\"       , type:type.uint32_le}\n\t\t]\n\t},\n\t0x10: {\n\t\tname:\"Get wifi info\",\n\t\tshortname:\"getWifiInfo\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x11: {\n\t\tname:\"Wifi info\",\n\t\tshortname:\"wifiInfo\",\n\t\tlength:14,\n\t\tfields:[\n\t\t\t{name:\"signal\"        , type:type.float_le} ,\n\t\t\t{name:\"tx\"            , type:type.uint32_le},\n\t\t\t{name:\"rx\"            , type:type.uint32_le},\n\t\t\t{name:\"mcuTemperature\", type:type.uint16}\n\t\t]\n\t},\n\t0x12: {\n\t\tname:\"Get wifi firmware state\",\n\t\tshortname:\"getWifiFirmwareState\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x13: {\n\t\tname:\"Wifi firmware state\",\n\t\tshortname:\"wifiFirmwareState\",\n\t\tlength:20,\n\t\tfields:[\n\t\t\t{name:\"build_second\"  , type:type.uint8},\n\t\t\t{name:\"build_minute\"  , type:type.uint8},\n\t\t\t{name:\"build_hour\"    , type:type.uint8},\n\t\t\t{name:\"build_day\"     , type:type.uint8},\n\t\t\t{name:\"build_month\"   , type:type.string3_le},\n\t\t\t{name:\"build_year\"    , type:type.uint8},\n\t\t\t{name:\"install_second\", type:type.uint8},\n\t\t\t{name:\"install_minute\", type:type.uint8},\n\t\t\t{name:\"install_hour\"  , type:type.uint8},\n\t\t\t{name:\"install_day\"   , type:type.uint8},\n\t\t\t{name:\"install_month\" , type:type.string3_le},\n\t\t\t{name:\"install_year\"  , type:type.uint8},\n\t\t\t{name:\"version\"       , type:type.uint32_le}\n\t\t]\n\t},\n\t0x14: {\n\t\tname:\"Get power state\",\n\t\tshortname:\"getPowerState\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x15: {\n\t\tname:\"Set power state\",\n\t\tshortname:\"setPowerState\",\n\t\tlength:2,\n\t\tfields:[\n\t\t\t{name:\"onoff\", type:type.uint16},\n\t\t]\n\t},\n\t0x16: {\n\t\tname:\"Power state\",\n\t\tshortname:\"powerState\",\n\t\tlength:2,\n\t\tfields:[\n\t\t\t{name:\"onoff\", type:type.uint16},\n\t\t]\n\t},\n\t0x17: {\n\t\tname:\"Get bulb label\",\n\t\tshortname:\"getBulbLabel\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x18: {\n\t\tname:\"Set bulb label\",\n\t\tshortname:\"setBulbLabel\",\n\t\tlength:32,\n\t\tfields:[\n\t\t\t{name:\"label\", type:type.string32},\n\t\t]\n\t},\n\t0x19: {\n\t\tname:\"Bulb label\",\n\t\tshortname:\"bulbLabel\",\n\t\tlength:32,\n\t\tfields:[\n\t\t\t{name:\"label\", type:type.string32},\n\t\t]\n\t},\n\t0x1a: {\n\t\tname:\"Get tags\",\n\t\tshortname:\"getTags\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x1b: {\n\t\tname:\"Set tags\",\n\t\tshortname:\"setTags\",\n\t\tlength:8,\n\t\tfields:[\n\t\t\t{name:\"tags\", type:type.uint64},\n\t\t]\n\t},\n\t0x1c: {\n\t\tname:\"Tags\",\n\t\tshortname:\"tags\",\n\t\tlength:8,\n\t\tfields:[\n\t\t\t{name:\"tags\", type:type.uint64},\n\t\t]\n\t},\n\t0x1d: {\n\t\tname:\"Get tag labels\",\n\t\tshortname:\"getTagLabels\",\n\t\tlength:8,\n\t\tfields:[\n\t\t\t{name:\"tags\", type:type.uint64},\n\t\t]\n\t},\n\t0x1e: {\n\t\tname:\"Set tag labels\",\n\t\tshortname:\"setTagLabels\",\n\t\tlength:40,\n\t\tfields:[\n\t\t\t{name:\"tags\", type:type.uint64},\n\t\t\t{name:\"label\", type:type.string32},\n\t\t]\n\t},\n\t0x1f: {\n\t\tname:\"Tag labels\",\n\t\tshortname:\"tagLabels\",\n\t\tlength:40,\n\t\tfields:[\n\t\t\t{name:\"tags\", type:type.uint64},\n\t\t\t{name:\"label\", type:type.string32},\n\t\t]\n\t},\n\t0x20: {\n\t\tname:\"Get version\",\n\t\tshortname:\"getVersion\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x21: {\n\t\tname:\"Version state\",\n\t\tshortname:\"versionState\",\n\t\tlength:12,\n\t\tfields:[\n\t\t\t{name:\"vendor\",  type:type.uint32},\n\t\t\t{name:\"product\", type:type.uint32},\n\t\t\t{name:\"version\", type:type.uint32}\n\t\t]\n\t},\n\t0x22: {\n\t\tname:\"Get info\",\n\t\tshortname:\"getInfo\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x23: {\n\t\tname:\"Info state\",\n\t\tshortname:\"infoState\",\n\t\tlength:24,\n\t\tfields:[\n\t\t\t{name:\"time\"    , type:type.uint64_le},\n\t\t\t{name:\"uptime\"  , type:type.uint64_le},\n\t\t\t{name:\"downtime\", type:type.uint64_le}\n\t\t]\n\t},\n\t0x24: {\n\t\tname:\"Get MCU rail voltage\",\n\t\tshortname:\"getMcuRailVoltage\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x25: {\n\t\tname:\"MCU rail voltage\",\n\t\tshortname:\"mcuRailVoltage\",\n\t\tlength:4,\n\t\tfields:[\n\t\t\t{name:\"voltage\", type:type.uint32_le},\n\t\t]\n\t},\n\t0x26: {\n\t\tname:\"Reboot\",\n\t\tshortname:\"reboot\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x27: {\n\t\tname:\"Set factory test mode\",\n\t\tshortname:\"setFactoryTestMode\",\n\t\tlength:1,\n\t\tfields:[\n\t\t\t{name:\"on\", type:type.uint8},\n\t\t]\n\t},\n\t0x28: {\n\t\tname:\"Disable factory test mode\",\n\t\tshortname:\"disableFactoryTestMode\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x65: {\n\t\tname:\"Get light state\",\n\t\tshortname:\"getLightState\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x66: {\n\t\tname:\"Set light colour\",\n\t\tshortname:\"setLightColour\",\n\t\tlength:13,\n\t\tfields:[\n\t\t\t{name:\"stream\"    , type:type.uint8}    ,\n\t\t\t{name:\"hue\"       , type:type.uint16_le},\n\t\t\t{name:\"saturation\", type:type.uint16_le},\n\t\t\t{name:\"brightness\", type:type.uint16_le},\n\t\t\t{name:\"kelvin\"    , type:type.uint16_le},\n\t\t\t{name:\"fadeTime\"  , type:type.uint32_le},\n\t\t]\n\t},\n\t0x67: {\n\t\tname:\"Set waveform\",\n\t\tshortname:\"setWaveform\",\n\t\tlength:21,\n\t\tfields:[\n\t\t\t{name:\"stream\"    , type:type.uint8}    ,\n\t\t\t{name:\"transient\" , type:type.uint8}    ,\n\t\t\t{name:\"hue\"       , type:type.uint16_le},\n\t\t\t{name:\"saturation\", type:type.uint16_le},\n\t\t\t{name:\"brightness\", type:type.uint16_le},\n\t\t\t{name:\"kelvin\"    , type:type.uint16_le},\n\t\t\t{name:\"period\"    , type:type.uint32_le},\n\t\t\t{name:\"cycles\"    , type:type.float}    ,\n\t\t\t{name:\"dutyCycles\", type:type.uint16}   ,\n\t\t\t{name:\"waveform\"  , type:type.uint8}    ,\n\t\t]\n\t},\n\t0x68: {\n\t\tname:\"Set dim (absolute)\",\n\t\tshortname:\"setDimAbsolute\",\n\t\tlength:6,\n\t\tfields:[\n\t\t\t{name:\"brightness\", type:type.uint16_le},\n\t\t\t{name:\"duration\"  , type:type.uint32}   ,\n\t\t]\n\t},\n\t0x69: {\n\t\tname:\"Set dim (relative)\",\n\t\tshortname:\"setDimRelative\",\n\t\tlength:6,\n\t\tfields:[\n\t\t\t{name:\"brightness\", type:type.uint16_le},\n\t\t\t{name:\"duration\"  , type:type.uint32}   ,\n\t\t]\n\t},\n\t0x6a: {\n\t\tname:\"Set light colour (RGBW)\",\n\t\tshortname:\"setLightColourRGBW\",\n\t\tlength:8,\n\t\tfields:[\n\t\t\t{name:\"blue\"     , type:type.uint16_le},\n\t\t\t{name:\"green\"    , type:type.uint16_le},\n\t\t\t{name:\"red\"      , type:type.uint16_le},\n\t\t\t{name:\"white\"    , type:type.uint16_le},\n\t\t]\n\t},\n\t0x6b: {\n\t\tname:\"Light status\",\n\t\tshortname:\"lightStatus\",\n\t\tlength:52,\n\t\tfields:[\n\t\t\t{name:\"hue\"       , type:type.uint16_le},\n\t\t\t{name:\"saturation\", type:type.uint16_le},\n\t\t\t{name:\"brightness\", type:type.uint16_le},\n\t\t\t{name:\"kelvin\"    , type:type.uint16_le},\n\t\t\t{name:\"dim\"       , type:type.uint16_le},\n\t\t\t{name:\"power\"     , type:type.uint16_le},\n\t\t\t{name:\"bulbLabel\" , type:type.string32} ,\n\t\t\t{name:\"tags\"      , type:type.uint64}   ,\n\t\t]\n\t},\n\t0x6e: {\n\t\tname:\"Get light temperature\",\n\t\tshortname:\"getLightTemperature\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x6f: {\n\t\tname:\"Light temperature\",\n\t\tshortname:\"lightTemperature\",\n\t\tlength:2,\n\t\tfields:[\n\t\t\t{name:\"temerature\" , type:type.uint16_le},\n\t\t]\n\t},\n\t0xcb: {\n\t\tname:\"Wan State Connect\",\n\t\tshortname:\"wanStateConnect\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0xcc: {\n\t\tname:\"Wan Sub\",\n\t\tshortname:\"wanSub\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0xcd: {\n\t\tname:\"Wan Unsub\",\n\t\tshortname:\"wanUnsub\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0xce: {\n\t\tname:\"Wan State Sub\",\n\t\tshortname:\"wanStateSub\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x12d: {\n\t\tname:\"Get wifi state\",\n\t\tshortname:\"getWifiState\",\n\t\tlength:1,\n\t\tfields:[\n\t\t\t{name:\"interface\", type:type.uint8},\n\t\t]\n\t},\n\t0x12e: {\n\t\tname:\"Set wifi state\",\n\t\tshortname:\"setWifiState\",\n\t\tlength:22,\n\t\tfields:[\n\t\t\t{name:\"interface\", type:type.uint8},\n\t\t\t{name:\"wifiStatus\", type:type.uint8},\n\t\t\t{name:\"ip4Address\", type:type.byte4},\n\t\t\t{name:\"ip6Address\", type:type.byte16},\n\t\t]\n\t},\n\t0x12f: {\n\t\tname:\"Wifi state\",\n\t\tshortname:\"wifiState\",\n\t\tlength:22,\n\t\tfields:[\n\t\t\t{name:\"interface\" , type:type.uint8} ,\n\t\t\t{name:\"wifiStatus\", type:type.uint8} ,\n\t\t\t{name:\"ip4Address\", type:type.byte4} ,\n\t\t\t{name:\"ip6Address\", type:type.byte16},\n\t\t]\n\t},\n\t0x130: {\n\t\tname:\"Get access points\",\n\t\tshortname:\"getAccessPoints\",\n\t\tlength:0,\n\t\tfields:[]\n\t},\n\t0x131: {\n\t\tname:\"Set access point\",\n\t\tshortname:\"setAccessPoints\",\n\t\tlength:98,\n\t\tfields:[\n\t\t\t{name:\"interface\"       , type:type.uint8}   ,\n\t\t\t{name:\"ssid\"            , type:type.string32},\n\t\t\t{name:\"password\"        , type:type.string64},\n\t\t\t{name:\"securityProtocol\", type:type.uint8}   ,\n\t\t]\n\t},\n\t0x132: {\n\t\tname:\"Access point\",\n\t\tshortname:\"accessPoint\",\n\t\tlength:38,\n\t\tfields:[\n\t\t\t{name:\"interface\"       , type:type.uint8}   ,\n\t\t\t{name:\"ssid\"            , type:type.string32},\n\t\t\t{name:\"securityProtocol\", type:type.uint8}   ,\n\t\t\t{name:\"strength\"        , type:type.uint16}  ,\n\t\t\t{name:\"channel\"         , type:type.uint16}  ,\n\t\t]\n\t},\n};\n\npacket.polyfill();\n\nmodule.exports = packet;\n\n","/home/travis/build/npmtest/node-npmtest-lifx/node_modules/lifx/cli2.js":"var lifx = require('./lifx');\nvar util = require('util');\n\nvar step = 100;\nvar autoCommit = true;\nvar timing = 0;\n\nvar lx = lifx.init();\n\nlx.on('bulbstate', function(b) {\n\tconsole.log('Bulb state: ' + util.inspect(b));\n});\nlx.on('bulbonoff', function(b) {\n\tconsole.log('Bulb on/off: ' + util.inspect(b));\n});\nlx.on('bulb', function(b) {\n\tconsole.log('New bulb found: ' + b.name);\n});\nlx.on('gateway', function(g) {\n\tconsole.log('New gateway found: ' + g.ip);\n});\n\nconsole.log(\"Keys:\");\nconsole.log(\"Press 1 to turn the lights on\");\nconsole.log(\"Press 2 to turn the lights off\");\nconsole.log(\"\");\nconsole.log(\"Press q and a to cycle the hue\");\nconsole.log(\"Press w and s to cycle the saturation\");\nconsole.log(\"Press e and d to cycle the luminance\");\nconsole.log(\"Press r and f to cycle the white colour\");\nconsole.log(\"Press enter to send these values to the bulbs\");\nconsole.log(\"\");\nconsole.log(\"Press 6 to make the changes apply immediately\");\nconsole.log(\"Press 7 to make it wait until you hit enter before applying\");\nconsole.log(\"Press 8 to show debug messages including network traffic\");\nconsole.log(\"Press 9 to hide debug messages including network traffic\");\n//console.log(\"Press a to request an info update from the lights\");\n\nvar stdin = process.openStdin();\nprocess.stdin.setRawMode(true);\nprocess.stdin.resume();\n\nvar hue = 0;\nvar sat = 0;\nvar lum = 0;\nvar whi = 0;\n\nstdin.on('data', function (key) {\n\t//process.stdout.write('Got key ' + util.inspect(key) + '\\n');\n\n\tswitch (key[0]) {\n\n\t\tcase 0x31: // 1\n\t\t\tconsole.log(\"Lights on\");\n\t\t\tlx.lightsOn();\n\t\t\tbreak;\n\n\t\tcase 0x32: // 2\n\t\t\tconsole.log(\"Lights off\");\n\t\t\tlx.lightsOff();\n\t\t\tbreak;\n\n\t\tcase 0x36: // 6\n\t\t\tconsole.log(\"Auto commit on\");\n\t\t\tautoCommit = true;\n\t\t\tbreak;\n\n\t\tcase 0x37: // 7\n\t\t\tconsole.log(\"Auto commit off\");\n\t\t\tautoCommit = false;\n\t\t\tbreak;\n\n\t\tcase 0x38: // 8\n\t\t\tconsole.log(\"Debug on\");\n\t\t\tlifx.setDebug(true);\n\t\t\tbreak;\n\n\t\tcase 0x39: // 9\n\t\t\tconsole.log(\"Debug off\");\n\t\t\tlifx.setDebug(false);\n\t\t\tbreak;\n\n\t\tcase 0x71: // q\n\t\t\thue = (hue + step) & 0xffff;\n\t\t\tconsole.log(\"H<\" + hue + \"> S<\" + sat + \"> L<\" + lum + \"> W<\" + whi + \">\");\n\t\t\tif (autoCommit) lx.lightsColour(hue, sat, lum, whi, timing);\n\t\t\tbreak;\n\n\t\tcase 0x61: // a\n\t\t\thue = (hue - step) & 0xffff;\n\t\t\tconsole.log(\"H<\" + hue + \"> S<\" + sat + \"> L<\" + lum + \"> W<\" + whi + \">\");\n\t\t\tif (autoCommit) lx.lightsColour(hue, sat, lum, whi, timing);\n\t\t\tbreak;\n\n\t\tcase 0x77: // w\n\t\t\tsat = (sat + step) & 0xffff;\n\t\t\tconsole.log(\"H<\" + hue + \"> S<\" + sat + \"> L<\" + lum + \"> W<\" + whi + \">\");\n\t\t\tif (autoCommit) lx.lightsColour(hue, sat, lum, whi, timing);\n\t\t\tbreak;\n\n\t\tcase 0x73: // s\n\t\t\tsat = (sat - step) & 0xffff;\n\t\t\tconsole.log(\"H<\" + hue + \"> S<\" + sat + \"> L<\" + lum + \"> W<\" + whi + \">\");\n\t\t\tif (autoCommit) lx.lightsColour(hue, sat, lum, whi, timing);\n\t\t\tbreak;\n\n\t\tcase 0x65: // e\n\t\t\tlum = (lum + step) & 0xffff;\n\t\t\tconsole.log(\"H<\" + hue + \"> S<\" + sat + \"> L<\" + lum + \"> W<\" + whi + \">\");\n\t\t\tif (autoCommit) lx.lightsColour(hue, sat, lum, whi, timing);\n\t\t\tbreak;\n\n\t\tcase 0x64: // d\n\t\t\tlum = (lum - step) & 0xffff;\n\t\t\tconsole.log(\"H<\" + hue + \"> S<\" + sat + \"> L<\" + lum + \"> W<\" + whi + \">\");\n\t\t\tif (autoCommit) lx.lightsColour(hue, sat, lum, whi, timing);\n\t\t\tbreak;\n\n\t\tcase 0x72: // r\n\t\t\twhi = (whi + step) & 0xffff;\n\t\t\tconsole.log(\"H<\" + hue + \"> S<\" + sat + \"> L<\" + lum + \"> W<\" + whi + \">\");\n\t\t\tif (autoCommit) lx.lightsColour(hue, sat, lum, whi, timing);\n\t\t\tbreak;\n\n\t\tcase 0x66: // f\n\t\t\twhi = (whi - step) & 0xffff;\n\t\t\tconsole.log(\"H<\" + hue + \"> S<\" + sat + \"> L<\" + lum + \"> W<\" + whi + \">\");\n\t\t\tif (autoCommit) lx.lightsColour(hue, sat, lum, whi, timing);\n\t\t\tbreak;\n\n\t\tcase 0x67: // g\n\t\t\tlx.findBulbs();\n\t\t\tbreak;\n\n\t\tcase 0x0d: // enter\n\t\t\tconsole.log(\"Sending H<\" + hue + \"> S<\" + sat + \"> L<\" + lum + \"> W<\" + whi + \">\");\n\t\t\tlx.lightsColour(hue, sat, lum, whi, timing);\n\t\t\tbreak;\n\n\t\tcase 0x03: // ctrl-c\n\t\t\tconsole.log(\"Closing...\");\n\t\t\tlx.close();\n\t\t\tprocess.stdin.pause();\n\t\t\t//process.exit();\n\t\t\tbreak;\n\n\t}\n});\n\n","/home/travis/build/npmtest/node-npmtest-lifx/node_modules/lifx/cli3.js":"var lifx = require('./lifx');\nvar util = require('util');\n\nvar lx = lifx.init();\n\nvar stdin = process.openStdin();\nprocess.stdin.setRawMode(true);\nprocess.stdin.resume();\n\nconsole.log(\"Control 2 lights independently: press numbers 1-8\");\n\nstdin.on('data', function (key) {\n\t//process.stdout.write('Got key ' + util.inspect(key) + '\\n');\n\tswitch (key[0]) {\n\n\t\tcase 0x31: // 1\n\t\t\tconsole.log(\"Lights on\");\n\t\t\tlx.lightsOn();\n\t\t\tbreak;\n\n\t\tcase 0x32: // 2\n\t\t\tconsole.log(\"Lights off\");\n\t\t\tlx.lightsOff();\n\t\t\tbreak;\n\n\t\tcase 0x33: // 3\n\t\t\tconsole.log(util.inspect(lx));\n\t\t\tbreak;\n\n\t\tcase 0x34: // 4\n\t\t\tlx.lightsOn(lx.bulbs[0]);\n\t\t\tbreak;\n\n\t\tcase 0x35: // 5\n\t\t\tlx.lightsOff(lx.bulbs[0]);\n\t\t\tbreak;\n\n\t\tcase 0x36: // 6\n\t\t\tlx.lightsOn(lx.bulbs[1]);\n\t\t\tbreak;\n\n\t\tcase 0x37: // 7\n\t\t\tlx.lightsOff(lx.bulbs[1]);\n\t\t\tbreak;\n\n\t\tcase 0x38: // 8\n\t\t\tconsole.log(lx.bulbs);\n\t\t\tbreak;\n\n\t\tcase 0x39: // 9\n\t\t\tlx.findBulbs();\n\t\t\tbreak;\n\n\t\tcase 0x03: // ctrl-c\n\t\t\tconsole.log(\"Closing...\");\n\t\t\tlx.close();\n\t\t\tprocess.stdin.pause();\n\t\t\t//process.exit();\n\t\t\tbreak;\n\n\t}\n});\n\n","/home/travis/build/npmtest/node-npmtest-lifx/node_modules/lifx/cli.js":"var lifx = require('./lifx');\nvar util = require('util');\nvar packet = require('./packet');\n\n\nvar lx = lifx.init();\n\nlx.on('bulbstate', function(b) {\n\t//console.log('Bulb state: ' + util.inspect(b));\n});\n\nlx.on('bulbonoff', function(b) {\n\t//console.log('Bulb on/off: ' + util.inspect(b));\n});\n\nlx.on('bulb', function(b) {\n\tconsole.log('New bulb found: ' + b.name + \" : \" + b.addr.toString(\"hex\"));\n});\n\nlx.on('gateway', function(g) {\n\tconsole.log('New gateway found: ' + g.ip);\n});\n\nlx.on('packet', function(p) {\n\t// Show informational packets\n\tswitch (p.packetTypeShortName) {\n\t\tcase 'powerState':\n\t\tcase 'wifiInfo':\n\t\tcase 'wifiFirmwareState':\n\t\tcase 'wifiState':\n\t\tcase 'accessPoint':\n\t\tcase 'bulbLabel':\n\t\tcase 'tags':\n\t\tcase 'tagLabels':\n\t\t//case 'lightStatus':\n\t\tcase 'timeState':\n\t\tcase 'resetSwitchState':\n\t\tcase 'meshInfo':\n\t\tcase 'meshFirmware':\n\t\tcase 'versionState':\n\t\tcase 'infoState':\n\t\tcase 'mcuRailVoltage':\n\t\t\tconsole.log(p.packetTypeName + \" - \" + p.preamble.bulbAddress.toString('hex') + \" - \" + util.inspect(p.payload));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n});\n\nconsole.log(\"Keys:\");\nconsole.log(\"Press 1 to turn the lights on\");\nconsole.log(\"Press 2 to turn the lights off\");\nconsole.log(\"Press 3 to turn the lights a dim red\");\nconsole.log(\"Press 4 to turn the lights a dim purple\");\nconsole.log(\"Press 5 to turn the lights a bright white\");\nconsole.log(\"Press 6 to cycle forwards through colours\");\nconsole.log(\"Press 7 to cycle backwards through colours\");\nconsole.log(\"Press 8 to show debug messages including network traffic\");\nconsole.log(\"Press 9 to hide debug messages including network traffic\");\nconsole.log(\"Press letters a-m to request various status fields\");\n\nvar stdin = process.openStdin();\nprocess.stdin.setRawMode(true);\nprocess.stdin.resume();\n\nvar cycledColour = 0;\n\nstdin.on('data', function (key) {\n\t//process.stdout.write('Got key ' + util.inspect(key) + '\\n');\n\tswitch (key[0]) {\n\n\t\tcase 0x31: // 1\n\t\t\tconsole.log(\"Lights on\");\n\t\t\t// lx.lightsOn('Bedroom Lamp'); // Can specify one bulb by name\n\t\t\tvar b = lx.bulbs['d073d5014163'];\n\t\t\tlx.lightsOn(b);\n//\t\t\tlx.lightsOn();\n\t\t\tbreak;\n\n\t\tcase 0x32: // 2\n\t\t\tconsole.log(\"Lights off\");\n\t\t\tvar b = lx.bulbs['d073d5014163'];\n\t\t\tlx.lightsOff(b);\n//\t\t\tlx.lightsOff();\n\t\t\tbreak;\n\n\t\tcase 0x33: // 3\n\t\t\tconsole.log(\"Dim red\");\n\t\t\t// BB8 7D0\n\t\t\tlx.lightsColour(0x0000, 0xffff, 1000, 0, 0);\n\t\t\tbreak;\n\n\t\tcase 0x34: // 4\n\t\t\tconsole.log(\"Dim purple\");\n\t\t\t//lx.lightsColour(0x0000, 0xffff, 500, 0, 0);\n\t\t\tlx.lightsColour(0xcc15, 0xffff, 500, 0, 0);\n\t\t\tbreak;\n\n\t\tcase 0x35: // 5\n\t\t\tconsole.log(\"Bright white\");\n\t\t\tlx.lightsColour(0x0000, 0x0000, 0x8000, 0x0af0, 0x0513);\n\t\t\tbreak;\n\n\t\tcase 0x36: // 6\n\t\t\tcycledColour = (cycledColour+100) & 0xffff; console.log(\"Colour value is \" + cycledColour);\n\t\t\tlx.lightsColour(cycledColour, 0xffff, 0x0200, 0x0000, 0x0000);\n\t\t\tbreak;\n\n\t\tcase 0x37: // 7\n\t\t\tcycledColour = (cycledColour-100) & 0xffff; console.log(\"Colour value is \" + cycledColour);\n\t\t\tlx.lightsColour(cycledColour, 0xffff, 0x0200, 0x0000, 0x0000);\n\t\t\tbreak;\n\n\t\tcase 0x38: // 8\n\t\t\tconsole.log(\"Enabling debug\");\n\t\t\tlifx.setDebug(true);\n\t\t\tbreak;\n\n\t\tcase 0x39: // 9\n\t\t\tconsole.log(\"Disabling debug\");\n\t\t\tlifx.setDebug(false);\n\t\t\tbreak;\n\n\t\tcase 0x61: // a\n\t\t\tconsole.log(\"Requesting voltage\");\n\t\t\tvar message = packet.getMcuRailVoltage();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x62: // b\n\t\t\tconsole.log(\"Requesting power state\");\n\t\t\tvar message = packet.getPowerState();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x63: // c\n\t\t\tconsole.log(\"Requesting wifi info\");\n\t\t\tvar message = packet.getWifiInfo();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x64: // d\n\t\t\tconsole.log(\"Requesting wifi firmware state\");\n\t\t\tvar message = packet.getWifiFirmwareState();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x65: // e\n\t\t\tconsole.log(\"Requesting wifi state\");\n\t\t\tvar message = packet.getWifiState({interface:2});\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x66: // f\n\t\t\tconsole.log(\"Requesting bulb label\");\n\t\t\tvar message = packet.getBulbLabel();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x67: // g\n\t\t\tconsole.log(\"Requesting tags\");\n\t\t\tvar message = packet.getTags();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x68: // h\n\t\t\tconsole.log(\"Requesting tag label for tag 1\");\n\t\t\tvar message = packet.getTagLabels({tags:new Buffer([1,0,0,0,0,0,0,0])});\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x69: // i\n\t\t\tconsole.log(\"Requesting time\");\n\t\t\tvar message = packet.getTime();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x6a: // j\n\t\t\tconsole.log(\"Requesting info\");\n\t\t\tvar message = packet.getInfo();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x6b: // k\n\t\t\tconsole.log(\"Requesting reset switch state\");\n\t\t\tvar message = packet.getResetSwitchState();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x6c: // l\n\t\t\tconsole.log(\"Requesting mesh info\");\n\t\t\tvar message = packet.getMeshInfo();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x6d: // m\n\t\t\tconsole.log(\"Requesting mesh firmware\");\n\t\t\tvar message = packet.getMeshFirmware();\n\t\t\tlx.sendToAll(message);\n\t\t\tbreak;\n\n\t\tcase 0x03: // ctrl-c\n\t\t\tconsole.log(\"Closing...\");\n\t\t\tlx.close();\n\t\t\tprocess.stdin.pause();\n\t\t\t//process.exit();\n\t\t\tbreak;\n\n\t}\n});\n","/home/travis/build/npmtest/node-npmtest-lifx/node_modules/lifx/lifx_ol.js":"var dgram = require('dgram');\nvar net = require('net');\nvar util = require('util');\nvar events = require('events');\nvar clone = require('clone');\n\nvar packet = require('./packet');\n\nvar port = 56700;\n\nvar debug = false;\n\nfunction init() {\n\tvar l = new Lifx(function(_l) {\n\t\t_l.startDiscovery();\n\t});\n\treturn l;\n}\n\nfunction Lifx(cb) {\n\tevents.EventEmitter.call(this);\n\tthis.gateways = [];\n\tthis.bulbs = [];\n\tthis._intervalID = null;\n\n\t// Create the network client, to handle discovery and gateway messages\n\tvar self = this;\n\tthis.udpClient = dgram.createSocket(\"udp4\");\n\t//this.udpClient.unref(); // Stop this from preventing Node from ending\n\tthis.udpClient.on(\"error\", function (err) {\n\t\tconsole.log(\"UDP error \" + err);\n\t});\n\n\tthis.udpClient.on(\"message\", function (msg, rinfo) {\n\t\tif (debug) console.log(\" U- \" + msg.toString(\"hex\"));\n\t\tvar pkt = packet.fromBytes(msg);\n\t\tif (pkt.packetTypeShortName == 'panGateway' && pkt.payload.service == 1) {\n\t\t\tvar gw = new Gateway(self, rinfo.address, pkt.payload.port, pkt.preamble.site);\n\t\t\tself.foundGateway(gw);\n\t\t}\n\t});\n\tthis.udpClient.bind(port, \"0.0.0.0\", function() {\n\t\tself.udpClient.setBroadcast(true);\n\t\tcb(self);\n\t});\n}\nLifx.prototype.__proto__ = events.EventEmitter.prototype;\n\nLifx.prototype.sendPacket = function(dstIp, dstPort, packet) {\n\tif (debug) console.log(\" U+ \" + packet.toString(\"hex\"));\n\tthis.udpClient.send(packet, 0, packet.length, dstPort, dstIp, function(err, bytes) {\n\t});\n}\n\nLifx.prototype.startDiscovery = function() {\n\t// Now send the discovery packets\n\tvar self = this;\n\tthis._intervalID = setInterval(function() {\n\t\tvar message = packet.getPanGateway();\n\t\tself.sendPacket(\"255.255.255.255\", port, message);\n\t}, 1000);\n};\n\nLifx.prototype.foundGateway = function(gw) {\n\tvar found = false;\n\tfor (var i in this.gateways) {\n\t\tif (this.gateways[i].ipAddress.ip.toString('hex') == gw.ipAddress.ip.toString('hex')) {\n\t\t\tfound = true;\n\t\t}\n\t}\n\tif (!found) {\n\t\tthis.gateways.push(gw);\n\t\t// Look for bulbs on this gateway\n\t\tgw.connect();\n\t\tgw.on('_packet', this._getPacketHandler());\n\t\tgw.findBulbs();\n\t\tthis.emit(\"gateway\", gw);\n\t}\n};\n\nLifx.prototype._getPacketHandler = function() {\n\tvar self = this;\n\treturn function(p, gw) {self._gotPacket(p, gw);};\n};\n\nLifx.prototype._gotPacket = function(data, gw) {\n\tif (debug) console.log(\" T- \" + data.toString(\"hex\"));\n\tvar p = packet.fromBytes(data);\n\n\tswitch (p.packetTypeShortName) {\n\t\tcase 'lightStatus':\n\t\t\tthis.foundBulb(p, gw);\n\t\t\tbreak;\n\t}\n\n\tthis.emit('packet', clone(p));\n};\n\nLifx.prototype.foundBulb = function(bulb, gw) {\n\n\tvar bulbName = bulb.payload.bulbLabel;\n\tvar lifxAddress = bulb.preamble.bulbAddress;\n\tif (debug) console.log(\" * Found a bulb: \" + bulbName + \" (address \" + util.inspect(lifxAddress) + \")\");\n\n\tvar foundBulb = null;\n\tfor (var bulbId in this.bulbs) {\n\t\tif (this.bulbs[bulbId].lifxAddress.toString(\"hex\") == lifxAddress.toString(\"hex\")) {\n\t\t\tfoundBulb = this.bulbs[bulbId];\n\t\t}\n\t}\n\n\tif (!foundBulb) {\n\t\tvar newBulb = new Bulb(lifxAddress, bulbName);\n\t\tif (debug) console.log(\"*** New bulb found (\" + newBulb.name + \") by gateway \" + gw.ipAddress.ip + \" ***\");\n\t\tthis.bulbs.push(newBulb);\n\t\tthis.emit('bulb', clone(newBulb));\n\t\tfoundBulb = newBulb;\n\t}\n\n\tthis.emit('bulbstate', {bulb:foundBulb, state:bulb.payload});\n};\n\n// This represents each individual bulb\nfunction Bulb(_lifxAddress, _name) {\n\tthis.lifxAddress = _lifxAddress;\n\tthis.name        = _name;\n}\n\n// This represents the gateway, and its respective functions (eg discovery, send-to-all etc)\nfunction Gateway(LifxManager, ipAddress, port, site) {\n\t// TODO: validation...\n\tthis.LifxManager = LifxManager;\n\tthis.ipAddress = {ip:ipAddress, port:port};\n\tthis.lifxAddress = site;\n\tevents.EventEmitter.call(this);\n}\n\n// Make the Gateway into an event emitter\nGateway.prototype.__proto__ = events.EventEmitter.prototype;\n\nLifx.prototype.getBulbByLifxAddress = function(lifxAddress) {\n\tvar addrToSearch = lifxAddress;\n\tif (typeof lifxAddress != 'string') {\n\t\taddrToSearch = lifxAddress.toString('hex');\n\t}\n\tfor (var i in this.bulbs) {\n\t\tif (this.bulbs[i].lifxAddress.toString('hex') == addrToSearch) {\n\t\t\treturn this.bulbs[i];\n\t\t}\n\t}\n\treturn false;\n};\n\n// Open a control connection (over TCP) to the gateway node\nGateway.prototype.connect = function() {\n\tvar self = this;\n\t/*\n\tif (debug) console.log(\"Connecting to \" + this.ipAddress.ip + \":\" + this.ipAddress.port);\n\tthis.tcpClient = net.connect(this.ipAddress.port, this.ipAddress.ip);\n\tthis.tcpClient.on('data', function(data) {\n\t\tself.emit('_packet', data, self);\n\t});\n\tthis.tcpClient.on('error', function(err) {\n\t\tconsole.log(err);\n\t});\n\tthis.tcpClient.on('end', function() {\n\t\tconsole.log('TCP client disconnected');\n\t\tself.tcpClient.destroy();\n\t\tif (self.reconnect) {\n\t\t\tself.connect();\n\t\t}\n\t});\n\t*/\n};\n\nLifx.prototype.findBulbs = function() {\n\tthis.gateways.forEach(function(g) {\n\t\tg.findBulbs();\n\t});\n};\n\n// This method requests that the gateway tells about all of its bulbs\nGateway.prototype.findBulbs = function() {\n\tthis.send(packet.getLightState());\n};\n\n// Send a raw command\nGateway.prototype.send = function(sendBuf) {\n\tvar siteAddress = this.lifxAddress;\n\tsiteAddress.copy(sendBuf, 16);\n\tthis.LifxManager.sendPacket(this.ipAddress.ip, this.ipAddress.port, sendBuf);\n};\n\n// Close the connection to this gateway\nGateway.prototype.close = function() {\n\tthis.reconnect = false;\n\tthis.tcpClient.end();\n};\n\nLifx.prototype.close = function() {\n\tclearInterval(this._intervalID);\n\tthis.gateways.forEach(function(g) {\n\t\tg.close();\n\t});\n};\n\nLifx.prototype.sendToAll = function(command) {\n\tthis._sendToOneOrAll(command);\n};\n\nLifx.prototype.sendToOne = function(command, bulb) {\n\tthis._sendToOneOrAll(command, bulb);\n};\n\nLifx.prototype._sendToOneOrAll = function(command, bulb) {\n\tthis.gateways.forEach(function(g) {\n\t\tvar siteAddress = g.lifxAddress;\n\t\tsiteAddress.copy(command, 16);\n\t\tif (typeof bulb == 'undefined') {\n\t\t\tg.send(command);\n\t\t} else {\n\t\t\t// Overwrite the bulb address here\n\t\t\tvar target;\n\t\t\tif (Buffer.isBuffer(bulb)) {\n\t\t\t\ttarget = bulb;\n\t\t\t} else if (typeof bulb.lifxAddress != 'undefined') {\n\t\t\t\ttarget = bulb.lifxAddress;\n\t\t\t} else {\n\t\t\t\tthrow \"Unknown bulb\";\n\t\t\t}\n\t\t\ttarget.copy(command, 8);\n\t\t\tg.send(command);\n\t\t}\n\t});\n};\n\n/////// Fun methods ////////\n\n// Turn all lights on\nLifx.prototype.lightsOn = function(bulb) {\n\tthis._sendToOneOrAll(packet.setPowerState({onoff:1}), bulb);\n};\n\n// Turn all lights off\nLifx.prototype.lightsOff = function(bulb) {\n\tthis._sendToOneOrAll(packet.setPowerState({onoff:0}), bulb);\n};\n\n// Set all bulbs to a particular colour\n// Pass in 16-bit numbers for each param - they will be byte shuffled as appropriate\nLifx.prototype.lightsColour = function(hue, sat, lum, whitecol, timing, bulb) {\n\tvar params = {stream:0, hue:hue, saturation:sat, brightness:lum, kelvin:whitecol, fadeTime:timing};\n\tvar message = packet.setLightColour(params);\n\tthis._sendToOneOrAll(message, bulb);\n};\n\n// Request status from bulbs\nLifx.prototype.requestStatus = function() {\n\tthis._sendToOneOrAll(packet.getLightState());\n};\n\nmodule.exports = {\n\tinit:init,\n\tsetDebug:function(d){debug=d;}\n};\n\n","/home/travis/build/npmtest/node-npmtest-lifx/node_modules/lifx/web/app.js":"var util = require('util');\nvar express = require('express');\n\nvar app = express();\napp.use('/', express.static(__dirname + '/static'));\n\napp.get('/set/bulb1', function(req, res, next) {\n\tvar bulb1 = req.query.bulb1;\n\t// scale and cast to int\n\tvar hue = parseInt(bulb1.h * (0xffff / 360))\n\tvar sat = parseInt(bulb1.s * 0xffff)\n\tvar lum = parseInt(bulb1.l * 0xffff)\n\t//console.log(hue, sat, lum);\n\tlx.lightsColour(hue, sat, lum, 0x0dac, 0);\n\tres.end(\"OK\");\n});\n\napp.listen(3000);\nconsole.log('Listening on port 3000');\n\n\n\nvar lifx = require('../lifx');\nvar lx = lifx.init();\n\nlx.on('bulb', function(b) {\n\tconsole.log('New bulb found: ' + b.name);\n});\n\n","/home/travis/build/npmtest/node-npmtest-lifx/node_modules/lifx/mqtt/bin/lifxmqtt.js":"var lifx = require('../../lifx');\nvar util = require('util');\nvar mqtt = require('mqtt');\n\nvar broker = '10.1.0.1';\nvar lx = lifx.init();\n\nconsole.log(\"Searching for a LIFX gateway...\");\nconsole.log('');\nconsole.log('=== Instructions ===');\nconsole.log('Publish JSON to one of the following topics:');\nconsole.log('  /lifx/bulbcmd/<lifxAddress>/colour : {\"hue\":<hue>,\"saturation\":<sat>,\"luminance\":<lum>,\"colourTemp\":<whiteCol>}');\nconsole.log('  /lifx/bulbcmd/<lifxAddress>/on : {\"on\":<boolean>}');\nconsole.log('(where hue/sat/lum/whiteCol are 16-bit integers)');\nconsole.log('');\nconsole.log('or subscribe to one of the following topics:');\nconsole.log('  /lifx/newbulb : gets notified when a new bulb is found');\nconsole.log('  /lifx/bulb/<lifxAddress> : gets messages whenever the bulb state changes (will likely get duplicates)');\nconsole.log('');\n\nvar mqttClient = mqtt.createClient(1883, broker);\n\nlx.on('gateway', function(g) {\n\tmqttClient.publish('/lifx/gateway', JSON.stringify({ip:g.ip}));\n});\nlx.on('bulb', function(b) {\n\tmqttClient.publish('/lifx/newbulb', JSON.stringify({bulb:b,mqttTopicBase:\"/lifx/bulbcmd/\"+b.addr.toString('hex')}));\n});\nlx.on('bulbstate', function(bulb) {\n\tmqttClient.publish('/lifx/bulb/'+bulb.addr.toString('hex'), JSON.stringify(bulb));\n});\nlx.on('bulbonoff', function(bulb) {\n\tmqttClient.publish('/lifx/bulb/'+bulb.addr.toString('hex'), JSON.stringify({on:s.on}));\n});\n\nmqttClient.subscribe('/lifx/bulbcmd/#');\nmqttClient.on('message', function(topic, message) {\n\tconsole.log(topic + \" \" + message);\n\tif (matches = topic.match(/bulbcmd\\/([0-9a-f]{12})\\/([a-z]*)$/)) {\n\t\tvar lifxAddress = matches[1];\n\t\tvar cmd = matches[2];\n\t\ttry{\n\t\t\tvar params = JSON.parse(message);\n\t\t} catch (e) {\n\t\t\tconsole.log(\"Could not parse JSON message: \" + message);\n\t\t}\n                // Find bulb\n                var bulb = null;\n                for (var b in lx.bulbs) {\n                    if (lx.bulbs[b].addr.toString(\"hex\") == lifxAddress) {\n                        bulb = lx.bulbs[b];\n                    }\n                }\n                if (!bulb) {\n                    console.log(\"Bulb \" + lifxAddress + \" not found\");\n                    return;\n                }\n\t\tswitch (cmd) {\n\n\t\t\tcase \"colour\":\n\t\t\t\tif (\n\t\t\t\t\ttypeof params.hue == 'undefined'\n\t\t\t\t\t|| typeof params.saturation == 'undefined'\n\t\t\t\t\t|| typeof params.luminance == 'undefined'\n\t\t\t\t\t|| typeof params.colourTemp == 'undefined'\n\t\t\t\t) {\n\t\t\t\t\tconsole.log(\"Incomplete message; expecting all of hue/saturation/luminance/colourTemp in message \" + message);\n\t\t\t\t} else {\n\t\t\t\t\tlx.lightsColour(params.hue, params.saturation, params.luminance, params.colourTemp, 0, lifxAddress);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"on\":\n\t\t\tcase \"off\":\n\t\t\t\tif (typeof params.on != 'undefined') {\n\t\t\t\t\tif (params.on) {\n\t\t\t\t\t\tlx.lightsOn(bulb);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlx.lightsOff(bulb);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof params.off != 'undefined') {\n\t\t\t\t\tif (params.off) {\n\t\t\t\t\t\tlx.lightsOff(bulb);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlx.lightsOn(bulb);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Incomplete message; expecting one of on/off in message \" + message);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t} \n\tif (matches = topic.match(/bulbcmd\\/all\\/([a-z]*)$/)) {\n\t\tvar cmd = matches[1];\n\t\ttry{\n\t\t\tvar params = JSON.parse(message);\n\t\t} catch (e) {\n\t\t\tconsole.log(\"Could not parse JSON message: \" + message);\n\t\t}\n\t\tswitch (cmd) {\n\n\t\t\tcase \"colour\":\n\t\t\t\tif (\n\t\t\t\t\ttypeof params.hue == 'undefined'\n\t\t\t\t\t|| typeof params.saturation == 'undefined'\n\t\t\t\t\t|| typeof params.luminance == 'undefined'\n\t\t\t\t\t|| typeof params.colourTemp == 'undefined'\n\t\t\t\t) {\n\t\t\t\t\tconsole.log(\"Incomplete message; expecting all of hue/saturation/luminance/colourTemp in message \" + message);\n\t\t\t\t} else {\n\t\t\t\t\tlx.lightsColour(params.hue, params.saturation, params.luminance, params.colourTemp, 0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"on\":\n\t\t\tcase \"off\":\n\t\t\t\tif (typeof params.on != 'undefined') {\n\t\t\t\t\tif (params.on) {\n\t\t\t\t\t\tlx.lightsOn();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlx.lightsOff();\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof params.off != 'undefined') {\n\t\t\t\t\tif (params.off) {\n\t\t\t\t\t\tlx.lightsOff();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlx.lightsOn();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Incomplete message; expecting one of on/off in message \" + message);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n});\n\n","/home/travis/build/npmtest/node-npmtest-lifx/node_modules/lifx/web/static/spectrum/Gruntfile.js":"\nmodule.exports = function(grunt) {\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('component.json'),\n\n    qunit: {\n      all: ['test/index.html']\n    },\n\n    jshint: {\n      options: {\n        browser: true,\n        sub: true,\n\n        globals: {\n          jQuery: true\n        }\n      },\n      all: ['spectrum.js']\n    },\n\n\n    uglify: {\n      options: {\n        mangle: false\n      },\n      dist: {\n        files: {\n          'build/spectrum-min.js': ['spectrum.js']\n        }\n      }\n    }\n\n  });\n\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-qunit');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n\n\n  // Testing tasks\n  grunt.registerTask('test', ['jshint', 'qunit']);\n\n  // Travis CI task.\n  grunt.registerTask('travis', 'test');\n\n  // Default task.\n  grunt.registerTask('default', ['test']);\n\n  //Build Task.\n  grunt.registerTask('build', ['test', 'uglify']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-lifx/node_modules/lifx/web/static/spectrum/spectrum.js":"// Spectrum Colorpicker v1.2.0\n// https://github.com/bgrins/spectrum\n// Author: Brian Grinstead\n// License: MIT\n\n(function (window, $, undefined) {\n    var defaultOpts = {\n\n        // Callbacks\n        beforeShow: noop,\n        move: noop,\n        change: noop,\n        show: noop,\n        hide: noop,\n\n        // Options\n        color: false,\n        flat: false,\n        showInput: false,\n        allowEmpty: false,\n        showButtons: true,\n        clickoutFiresChange: false,\n        showInitial: false,\n        showPalette: false,\n        showPaletteOnly: false,\n        showSelectionPalette: true,\n        localStorageKey: false,\n        appendTo: \"body\",\n        maxSelectionSize: 7,\n        cancelText: \"cancel\",\n        chooseText: \"choose\",\n        preferredFormat: false,\n        className: \"\",\n        showAlpha: false,\n        theme: \"sp-light\",\n        palette: ['fff', '000'],\n        selectionPalette: [],\n        disabled: false\n    },\n    spectrums = [],\n    IE = !!/msie/i.exec( window.navigator.userAgent ),\n    rgbaSupport = (function() {\n        function contains( str, substr ) {\n            return !!~('' + str).indexOf(substr);\n        }\n\n        var elem = document.createElement('div');\n        var style = elem.style;\n        style.cssText = 'background-color:rgba(0,0,0,.5)';\n        return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');\n    })(),\n    inputTypeColorSupport = (function() {\n        var colorInput = $(\"<input type='color' value='!' />\")[0];\n        return colorInput.type === \"color\" && colorInput.value !== \"!\";\n    })(),\n    replaceInput = [\n        \"<div class='sp-replacer'>\",\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\n            \"<div class='sp-dd'>&#9660;</div>\",\n        \"</div>\"\n    ].join(''),\n    markup = (function () {\n\n        // IE does not support gradients with multiple stops, so we need to simulate\n        //  that for the rainbow slider with 8 divs that each have a single gradient\n        var gradientFix = \"\";\n        if (IE) {\n            for (var i = 1; i <= 6; i++) {\n                gradientFix += \"<div class='sp-\" + i + \"'></div>\";\n            }\n        }\n\n        return [\n            \"<div class='sp-container sp-hidden'>\",\n                \"<div class='sp-palette-container'>\",\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\n                \"</div>\",\n                \"<div class='sp-picker-container'>\",\n                    \"<div class='sp-top sp-cf'>\",\n                        \"<div class='sp-fill'></div>\",\n                        \"<div class='sp-top-inner'>\",\n                            \"<div class='sp-color'>\",\n                                \"<div class='sp-sat'>\",\n                                    \"<div class='sp-val'>\",\n                                        \"<div class='sp-dragger'></div>\",\n                                    \"</div>\",\n                                \"</div>\",\n                            \"</div>\",\n                            \"<div class='sp-clear sp-clear-display' title='Clear Color Selection'>\",\n                            \"</div>\",\n                            \"<div class='sp-hue'>\",\n                                \"<div class='sp-slider'></div>\",\n                                gradientFix,\n                            \"</div>\",\n                        \"</div>\",\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\n                    \"</div>\",\n                    \"<div class='sp-input-container sp-cf'>\",\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\n                    \"</div>\",\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\n                    \"<div class='sp-button-container sp-cf'>\",\n                        \"<a class='sp-cancel' href='#'></a>\",\n                        \"<button class='sp-choose'></button>\",\n                    \"</div>\",\n                \"</div>\",\n            \"</div>\"\n        ].join(\"\");\n    })();\n\n    function paletteTemplate (p, color, className) {\n        var html = [];\n        for (var i = 0; i < p.length; i++) {\n            var current = p[i];\n            if(current) {\n                var tiny = tinycolor(current);\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\n                c += (tinycolor.equals(color, current)) ? \" sp-thumb-active\" : \"\";\n\n                var swatchStyle = rgbaSupport ? (\"background-color:\" + tiny.toRgbString()) : \"filter:\" + tiny.toFilter();\n                html.push('<span title=\"' + tiny.toRgbString() + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\n            } else {\n                var cls = 'sp-clear-display';\n                html.push('<span title=\"No Color Selected\" data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>');\n            }\n        }\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\n    }\n\n    function hideAll() {\n        for (var i = 0; i < spectrums.length; i++) {\n            if (spectrums[i]) {\n                spectrums[i].hide();\n            }\n        }\n    }\n\n    function instanceOptions(o, callbackContext) {\n        var opts = $.extend({}, defaultOpts, o);\n        opts.callbacks = {\n            'move': bind(opts.move, callbackContext),\n            'change': bind(opts.change, callbackContext),\n            'show': bind(opts.show, callbackContext),\n            'hide': bind(opts.hide, callbackContext),\n            'beforeShow': bind(opts.beforeShow, callbackContext)\n        };\n\n        return opts;\n    }\n\n    function spectrum(element, o) {\n\n        var opts = instanceOptions(o, element),\n            flat = opts.flat,\n            showSelectionPalette = opts.showSelectionPalette,\n            localStorageKey = opts.localStorageKey,\n            theme = opts.theme,\n            callbacks = opts.callbacks,\n            resize = throttle(reflow, 10),\n            visible = false,\n            dragWidth = 0,\n            dragHeight = 0,\n            dragHelperHeight = 0,\n            slideHeight = 0,\n            slideWidth = 0,\n            alphaWidth = 0,\n            alphaSlideHelperWidth = 0,\n            slideHelperHeight = 0,\n            currentHue = 0,\n            currentSaturation = 0,\n            currentValue = 0,\n            currentAlpha = 1,\n            palette = opts.palette.slice(0),\n            paletteArray = $.isArray(palette[0]) ? palette : [palette],\n            selectionPalette = opts.selectionPalette.slice(0),\n            maxSelectionSize = opts.maxSelectionSize,\n            draggingClass = \"sp-dragging\",\n            shiftMovementDirection = null;\n\n        var doc = element.ownerDocument,\n            body = doc.body,\n            boundElement = $(element),\n            disabled = false,\n            container = $(markup, doc).addClass(theme),\n            dragger = container.find(\".sp-color\"),\n            dragHelper = container.find(\".sp-dragger\"),\n            slider = container.find(\".sp-hue\"),\n            slideHelper = container.find(\".sp-slider\"),\n            alphaSliderInner = container.find(\".sp-alpha-inner\"),\n            alphaSlider = container.find(\".sp-alpha\"),\n            alphaSlideHelper = container.find(\".sp-alpha-handle\"),\n            textInput = container.find(\".sp-input\"),\n            paletteContainer = container.find(\".sp-palette\"),\n            initialColorContainer = container.find(\".sp-initial\"),\n            cancelButton = container.find(\".sp-cancel\"),\n            clearButton = container.find(\".sp-clear\"),\n            chooseButton = container.find(\".sp-choose\"),\n            isInput = boundElement.is(\"input\"),\n            isInputTypeColor = isInput && inputTypeColorSupport && boundElement.attr(\"type\") === \"color\",\n            shouldReplace = isInput && !flat,\n            replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className) : $([]),\n            offsetElement = (shouldReplace) ? replacer : boundElement,\n            previewElement = replacer.find(\".sp-preview-inner\"),\n            initialColor = opts.color || (isInput && boundElement.val()),\n            colorOnShow = false,\n            preferredFormat = opts.preferredFormat,\n            currentPreferredFormat = preferredFormat,\n            clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,\n            isEmpty = !initialColor,\n            allowEmpty = opts.allowEmpty && !isInputTypeColor;\n\n        function applyOptions() {\n\n            if (opts.showPaletteOnly) {\n                opts.showPalette = true;\n            }\n\n            container.toggleClass(\"sp-flat\", flat);\n            container.toggleClass(\"sp-input-disabled\", !opts.showInput);\n            container.toggleClass(\"sp-alpha-enabled\", opts.showAlpha);\n            container.toggleClass(\"sp-clear-enabled\", allowEmpty);\n            container.toggleClass(\"sp-buttons-disabled\", !opts.showButtons);\n            container.toggleClass(\"sp-palette-disabled\", !opts.showPalette);\n            container.toggleClass(\"sp-palette-only\", opts.showPaletteOnly);\n            container.toggleClass(\"sp-initial-disabled\", !opts.showInitial);\n            container.addClass(opts.className);\n\n            reflow();\n        }\n\n        function initialize() {\n\n            if (IE) {\n                container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\n            }\n\n            applyOptions();\n\n            if (shouldReplace) {\n                boundElement.after(replacer).hide();\n            }\n\n            if (!allowEmpty) {\n                clearButton.hide();\n            }\n\n            if (flat) {\n                boundElement.after(container).hide();\n            }\n            else {\n\n                var appendTo = opts.appendTo === \"parent\" ? boundElement.parent() : $(opts.appendTo);\n                if (appendTo.length !== 1) {\n                    appendTo = $(\"body\");\n                }\n\n                appendTo.append(container);\n            }\n\n            if (localStorageKey && window.localStorage) {\n\n                // Migrate old palettes over to new format.  May want to remove this eventually.\n                try {\n                    var oldPalette = window.localStorage[localStorageKey].split(\",#\");\n                    if (oldPalette.length > 1) {\n                        delete window.localStorage[localStorageKey];\n                        $.each(oldPalette, function(i, c) {\n                             addColorToSelectionPalette(c);\n                        });\n                    }\n                }\n                catch(e) { }\n\n                try {\n                    selectionPalette = window.localStorage[localStorageKey].split(\";\");\n                }\n                catch (e) { }\n            }\n\n            offsetElement.bind(\"click.spectrum touchstart.spectrum\", function (e) {\n                if (!disabled) {\n                    toggle();\n                }\n\n                e.stopPropagation();\n\n                if (!$(e.target).is(\"input\")) {\n                    e.preventDefault();\n                }\n            });\n\n            if(boundElement.is(\":disabled\") || (opts.disabled === true)) {\n                disable();\n            }\n\n            // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\n            container.click(stopPropagation);\n\n            // Handle user typed input\n            textInput.change(setFromTextInput);\n            textInput.bind(\"paste\", function () {\n                setTimeout(setFromTextInput, 1);\n            });\n            textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\n\n            cancelButton.text(opts.cancelText);\n            cancelButton.bind(\"click.spectrum\", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                hide(\"cancel\");\n            });\n\n\n            clearButton.bind(\"click.spectrum\", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n\n               isEmpty = true;\n\n                move();\n                if(flat) {\n                    //for the flat style, this is a change event\n                    updateOriginalInput(true);\n                }\n            });\n\n\n            chooseButton.text(opts.chooseText);\n            chooseButton.bind(\"click.spectrum\", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n\n                if (isValid()) {\n                    updateOriginalInput(true);\n                    hide();\n                }\n            });\n\n            draggable(alphaSlider, function (dragX, dragY, e) {\n                currentAlpha = (dragX / alphaWidth);\n                isEmpty = false;\n                if (e.shiftKey) {\n                    currentAlpha = Math.round(currentAlpha * 10) / 10;\n                }\n\n                move();\n            });\n\n            draggable(slider, function (dragX, dragY) {\n                currentHue = parseFloat(dragY / slideHeight);\n                isEmpty = false;\n                move();\n            }, dragStart, dragStop);\n\n            draggable(dragger, function (dragX, dragY, e) {\n\n                // shift+drag should snap the movement to either the x or y axis.\n                if (!e.shiftKey) {\n                    shiftMovementDirection = null;\n                }\n                else if (!shiftMovementDirection) {\n                    var oldDragX = currentSaturation * dragWidth;\n                    var oldDragY = dragHeight - (currentValue * dragHeight);\n                    var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\n\n                    shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\n                }\n\n                var setSaturation = !shiftMovementDirection || shiftMovementDirection === \"x\";\n                var setValue = !shiftMovementDirection || shiftMovementDirection === \"y\";\n\n                if (setSaturation) {\n                    currentSaturation = parseFloat(dragX / dragWidth);\n                }\n                if (setValue) {\n                    currentValue = parseFloat((dragHeight - dragY) / dragHeight);\n                }\n\n                isEmpty = false;\n\n                move();\n\n            }, dragStart, dragStop);\n\n            if (!!initialColor) {\n                set(initialColor);\n\n                // In case color was black - update the preview UI and set the format\n                // since the set function will not run (default color is black).\n                updateUI();\n                currentPreferredFormat = preferredFormat || tinycolor(initialColor).format;\n\n                addColorToSelectionPalette(initialColor);\n            }\n            else {\n                updateUI();\n            }\n\n            if (flat) {\n                show();\n            }\n\n            function palletElementClick(e) {\n                if (e.data && e.data.ignore) {\n                    set($(this).data(\"color\"));\n                    move();\n                }\n                else {\n                    set($(this).data(\"color\"));\n                    updateOriginalInput(true);\n                    move();\n                    hide();\n                }\n\n                return false;\n            }\n\n            var paletteEvent = IE ? \"mousedown.spectrum\" : \"click.spectrum touchstart.spectrum\";\n            paletteContainer.delegate(\".sp-thumb-el\", paletteEvent, palletElementClick);\n            initialColorContainer.delegate(\".sp-thumb-el:nth-child(1)\", paletteEvent, { ignore: true }, palletElementClick);\n        }\n\n        function addColorToSelectionPalette(color) {\n            if (showSelectionPalette) {\n                var colorRgb = tinycolor(color).toRgbString();\n                if ($.inArray(colorRgb, selectionPalette) === -1) {\n                    selectionPalette.push(colorRgb);\n                    while(selectionPalette.length > maxSelectionSize) {\n                        selectionPalette.shift();\n                    }\n                }\n\n                if (localStorageKey && window.localStorage) {\n                    try {\n                        window.localStorage[localStorageKey] = selectionPalette.join(\";\");\n                    }\n                    catch(e) { }\n                }\n            }\n        }\n\n        function getUniqueSelectionPalette() {\n            var unique = [];\n            var p = selectionPalette;\n            var paletteLookup = {};\n            var rgb;\n\n            if (opts.showPalette) {\n\n                for (var i = 0; i < paletteArray.length; i++) {\n                    for (var j = 0; j < paletteArray[i].length; j++) {\n                        rgb = tinycolor(paletteArray[i][j]).toRgbString();\n                        paletteLookup[rgb] = true;\n                    }\n                }\n\n                for (i = 0; i < p.length; i++) {\n                    rgb = tinycolor(p[i]).toRgbString();\n\n                    if (!paletteLookup.hasOwnProperty(rgb)) {\n                        unique.push(p[i]);\n                        paletteLookup[rgb] = true;\n                    }\n                }\n            }\n\n            return unique.reverse().slice(0, opts.maxSelectionSize);\n        }\n\n        function drawPalette() {\n\n            var currentColor = get();\n\n            var html = $.map(paletteArray, function (palette, i) {\n                return paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i);\n            });\n\n            if (selectionPalette) {\n                html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\"));\n            }\n\n            paletteContainer.html(html.join(\"\"));\n        }\n\n        function drawInitial() {\n            if (opts.showInitial) {\n                var initial = colorOnShow;\n                var current = get();\n                initialColorContainer.html(paletteTemplate([initial, current], current, \"sp-palette-row-initial\"));\n            }\n        }\n\n        function dragStart() {\n            if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\n                reflow();\n            }\n            container.addClass(draggingClass);\n            shiftMovementDirection = null;\n        }\n\n        function dragStop() {\n            container.removeClass(draggingClass);\n        }\n\n        function setFromTextInput() {\n\n            var value = textInput.val();\n\n            if ((value === null || value === \"\") && allowEmpty) {\n                set(null);\n            }\n            else {\n                var tiny = tinycolor(value);\n                if (tiny.ok) {\n                    set(tiny);\n                }\n                else {\n                    textInput.addClass(\"sp-validation-error\");\n                }\n            }\n        }\n\n        function toggle() {\n            if (visible) {\n                hide();\n            }\n            else {\n                show();\n            }\n        }\n\n        function show() {\n            var event = $.Event('beforeShow.spectrum');\n\n            if (visible) {\n                reflow();\n                return;\n            }\n\n            boundElement.trigger(event, [ get() ]);\n\n            if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\n                return;\n            }\n\n            hideAll();\n            visible = true;\n\n            $(doc).bind(\"click.spectrum\", hide);\n            $(window).bind(\"resize.spectrum\", resize);\n            replacer.addClass(\"sp-active\");\n            container.removeClass(\"sp-hidden\");\n\n            if (opts.showPalette) {\n                drawPalette();\n            }\n            reflow();\n            updateUI();\n\n            colorOnShow = get();\n\n            drawInitial();\n            callbacks.show(colorOnShow);\n            boundElement.trigger('show.spectrum', [ colorOnShow ]);\n        }\n\n        function hide(e) {\n\n            // Return on right click\n            if (e && e.type == \"click\" && e.button == 2) { return; }\n\n            // Return if hiding is unnecessary\n            if (!visible || flat) { return; }\n            visible = false;\n\n            $(doc).unbind(\"click.spectrum\", hide);\n            $(window).unbind(\"resize.spectrum\", resize);\n\n            replacer.removeClass(\"sp-active\");\n            container.addClass(\"sp-hidden\");\n\n            var colorHasChanged = !tinycolor.equals(get(), colorOnShow);\n\n            if (colorHasChanged) {\n                if (clickoutFiresChange && e !== \"cancel\") {\n                    updateOriginalInput(true);\n                }\n                else {\n                    revert();\n                }\n            }\n\n            callbacks.hide(get());\n            boundElement.trigger('hide.spectrum', [ get() ]);\n        }\n\n        function revert() {\n            set(colorOnShow, true);\n        }\n\n        function set(color, ignoreFormatChange) {\n            if (tinycolor.equals(color, get())) {\n                return;\n            }\n\n            var newColor;\n            if (!color && allowEmpty) {\n                isEmpty = true;\n            } else {\n                isEmpty = false;\n                newColor = tinycolor(color);\n                var newHsv = newColor.toHsv();\n\n                currentHue = (newHsv.h % 360) / 360;\n                currentSaturation = newHsv.s;\n                currentValue = newHsv.v;\n                currentAlpha = newHsv.a;\n            }\n            updateUI();\n\n            if (newColor && newColor.ok && !ignoreFormatChange) {\n                currentPreferredFormat = preferredFormat || newColor.format;\n            }\n        }\n\n        function get(opts) {\n            opts = opts || { };\n\n            if (allowEmpty && isEmpty) {\n                return null;\n            }\n\n            return tinycolor.fromRatio({\n                h: currentHue,\n                s: currentSaturation,\n                v: currentValue,\n                a: Math.round(currentAlpha * 100) / 100\n            }, { format: opts.format || currentPreferredFormat });\n        }\n\n        function isValid() {\n            return !textInput.hasClass(\"sp-validation-error\");\n        }\n\n        function move() {\n            updateUI();\n\n            callbacks.move(get());\n            boundElement.trigger('move.spectrum', [ get() ]);\n        }\n\n        function updateUI() {\n\n            textInput.removeClass(\"sp-validation-error\");\n\n            updateHelperLocations();\n\n            // Update dragger background color (gradients take care of saturation and value).\n            var flatColor = tinycolor.fromRatio({ h: currentHue, s: 1, v: 1 });\n            dragger.css(\"background-color\", flatColor.toHexString());\n\n            // Get a format that alpha will be included in (hex and names ignore alpha)\n            var format = currentPreferredFormat;\n            if (currentAlpha < 1) {\n                if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\n                    format = \"rgb\";\n                }\n            }\n\n            var realColor = get({ format: format }),\n                displayColor = '';\n\n             //reset background info for preview element\n            previewElement.removeClass(\"sp-clear-display\");\n            previewElement.css('background-color', 'transparent');\n\n            if (!realColor && allowEmpty) {\n                // Update the replaced elements background with icon indicating no color selection\n                previewElement.addClass(\"sp-clear-display\");\n            }\n            else {\n               var realHex = realColor.toHexString(),\n                    realRgb = realColor.toRgbString();\n\n                // Update the replaced elements background color (with actual selected color)\n                if (rgbaSupport || realColor.alpha === 1) {\n                    previewElement.css(\"background-color\", realRgb);\n                }\n                else {\n                    previewElement.css(\"background-color\", \"transparent\");\n                    previewElement.css(\"filter\", realColor.toFilter());\n                }\n\n                if (opts.showAlpha) {\n                    var rgb = realColor.toRgb();\n                    rgb.a = 0;\n                    var realAlpha = tinycolor(rgb).toRgbString();\n                    var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\n\n                    if (IE) {\n                        alphaSliderInner.css(\"filter\", tinycolor(realAlpha).toFilter({ gradientType: 1 }, realHex));\n                    }\n                    else {\n                        alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\n                        alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\n                        alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\n                        alphaSliderInner.css(\"background\", gradient);\n                    }\n                }\n\n                displayColor = realColor.toString(format);\n            }\n            // Update the text entry input as it changes happen\n            if (opts.showInput) {\n                textInput.val(displayColor);\n            }\n\n            if (opts.showPalette) {\n                drawPalette();\n            }\n\n            drawInitial();\n        }\n\n        function updateHelperLocations() {\n            var s = currentSaturation;\n            var v = currentValue;\n\n            if(allowEmpty && isEmpty) {\n                //if selected color is empty, hide the helpers\n                alphaSlideHelper.hide();\n                slideHelper.hide();\n                dragHelper.hide();\n            }\n            else {\n                //make sure helpers are visible\n                alphaSlideHelper.show();\n                slideHelper.show();\n                dragHelper.show();\n\n                // Where to show the little circle in that displays your current selected color\n                var dragX = s * dragWidth;\n                var dragY = dragHeight - (v * dragHeight);\n                dragX = Math.max(\n                    -dragHelperHeight,\n                    Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)\n                );\n                dragY = Math.max(\n                    -dragHelperHeight,\n                    Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)\n                );\n                dragHelper.css({\n                    \"top\": dragY,\n                    \"left\": dragX\n                });\n\n                var alphaX = currentAlpha * alphaWidth;\n                alphaSlideHelper.css({\n                    \"left\": alphaX - (alphaSlideHelperWidth / 2)\n                });\n\n                // Where to show the bar that displays your current selected hue\n                var slideY = (currentHue) * slideHeight;\n                slideHelper.css({\n                    \"top\": slideY - slideHelperHeight\n                });\n            }\n        }\n\n        function updateOriginalInput(fireCallback) {\n            var color = get(),\n                displayColor = '',\n                hasChanged = !tinycolor.equals(color, colorOnShow);\n\n            if(color) {\n                displayColor = color.toString(currentPreferredFormat);\n                // Update the selection palette with the current color\n                addColorToSelectionPalette(color);\n            }\n\n            if (isInput) {\n                boundElement.val(displayColor);\n            }\n\n            colorOnShow = color;\n\n            if (fireCallback && hasChanged) {\n                callbacks.change(color);\n                boundElement.trigger('change', [ color ]);\n            }\n        }\n\n        function reflow() {\n            dragWidth = dragger.width();\n            dragHeight = dragger.height();\n            dragHelperHeight = dragHelper.height();\n            slideWidth = slider.width();\n            slideHeight = slider.height();\n            slideHelperHeight = slideHelper.height();\n            alphaWidth = alphaSlider.width();\n            alphaSlideHelperWidth = alphaSlideHelper.width();\n\n            if (!flat) {\n                container.css(\"position\", \"absolute\");\n                container.offset(getOffset(container, offsetElement));\n            }\n\n            updateHelperLocations();\n        }\n\n        function destroy() {\n            boundElement.show();\n            offsetElement.unbind(\"click.spectrum touchstart.spectrum\");\n            container.remove();\n            replacer.remove();\n            spectrums[spect.id] = null;\n        }\n\n        function option(optionName, optionValue) {\n            if (optionName === undefined) {\n                return $.extend({}, opts);\n            }\n            if (optionValue === undefined) {\n                return opts[optionName];\n            }\n\n            opts[optionName] = optionValue;\n            applyOptions();\n        }\n\n        function enable() {\n            disabled = false;\n            boundElement.attr(\"disabled\", false);\n            offsetElement.removeClass(\"sp-disabled\");\n        }\n\n        function disable() {\n            hide();\n            disabled = true;\n            boundElement.attr(\"disabled\", true);\n            offsetElement.addClass(\"sp-disabled\");\n        }\n\n        initialize();\n\n        var spect = {\n            show: show,\n            hide: hide,\n            toggle: toggle,\n            reflow: reflow,\n            option: option,\n            enable: enable,\n            disable: disable,\n            set: function (c) {\n                set(c);\n                updateOriginalInput();\n            },\n            get: get,\n            destroy: destroy,\n            container: container\n        };\n\n        spect.id = spectrums.push(spect) - 1;\n\n        return spect;\n    }\n\n    /**\n    * checkOffset - get the offset below/above and left/right element depending on screen position\n    * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js\n    */\n    function getOffset(picker, input) {\n        var extraY = 0;\n        var dpWidth = picker.outerWidth();\n        var dpHeight = picker.outerHeight();\n        var inputHeight = input.outerHeight();\n        var doc = picker[0].ownerDocument;\n        var docElem = doc.documentElement;\n        var viewWidth = docElem.clientWidth + $(doc).scrollLeft();\n        var viewHeight = docElem.clientHeight + $(doc).scrollTop();\n        var offset = input.offset();\n        offset.top += inputHeight;\n\n        offset.left -=\n            Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?\n            Math.abs(offset.left + dpWidth - viewWidth) : 0);\n\n        offset.top -=\n            Math.min(offset.top, ((offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?\n            Math.abs(dpHeight + inputHeight - extraY) : extraY));\n\n        return offset;\n    }\n\n    /**\n    * noop - do nothing\n    */\n    function noop() {\n\n    }\n\n    /**\n    * stopPropagation - makes the code only doing this a little easier to read in line\n    */\n    function stopPropagation(e) {\n        e.stopPropagation();\n    }\n\n    /**\n    * Create a function bound to a given object\n    * Thanks to underscore.js\n    */\n    function bind(func, obj) {\n        var slice = Array.prototype.slice;\n        var args = slice.call(arguments, 2);\n        return function () {\n            return func.apply(obj, args.concat(slice.call(arguments)));\n        };\n    }\n\n    /**\n    * Lightweight drag helper.  Handles containment within the element, so that\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\n    */\n    function draggable(element, onmove, onstart, onstop) {\n        onmove = onmove || function () { };\n        onstart = onstart || function () { };\n        onstop = onstop || function () { };\n        var doc = element.ownerDocument || document;\n        var dragging = false;\n        var offset = {};\n        var maxHeight = 0;\n        var maxWidth = 0;\n        var hasTouch = ('ontouchstart' in window);\n\n        var duringDragEvents = {};\n        duringDragEvents[\"selectstart\"] = prevent;\n        duringDragEvents[\"dragstart\"] = prevent;\n        duringDragEvents[\"touchmove mousemove\"] = move;\n        duringDragEvents[\"touchend mouseup\"] = stop;\n\n        function prevent(e) {\n            if (e.stopPropagation) {\n                e.stopPropagation();\n            }\n            if (e.preventDefault) {\n                e.preventDefault();\n            }\n            e.returnValue = false;\n        }\n\n        function move(e) {\n            if (dragging) {\n                // Mouseup happened outside of window\n                if (IE && document.documentMode < 9 && !e.button) {\n                    return stop();\n                }\n\n                var touches = e.originalEvent.touches;\n                var pageX = touches ? touches[0].pageX : e.pageX;\n                var pageY = touches ? touches[0].pageY : e.pageY;\n\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\n\n                if (hasTouch) {\n                    // Stop scrolling in iOS\n                    prevent(e);\n                }\n\n                onmove.apply(element, [dragX, dragY, e]);\n            }\n        }\n        function start(e) {\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\n            var touches = e.originalEvent.touches;\n\n            if (!rightclick && !dragging) {\n                if (onstart.apply(element, arguments) !== false) {\n                    dragging = true;\n                    maxHeight = $(element).height();\n                    maxWidth = $(element).width();\n                    offset = $(element).offset();\n\n                    $(doc).bind(duringDragEvents);\n                    $(doc.body).addClass(\"sp-dragging\");\n\n                    if (!hasTouch) {\n                        move(e);\n                    }\n\n                    prevent(e);\n                }\n            }\n        }\n        function stop() {\n            if (dragging) {\n                $(doc).unbind(duringDragEvents);\n                $(doc.body).removeClass(\"sp-dragging\");\n                onstop.apply(element, arguments);\n            }\n            dragging = false;\n        }\n\n        $(element).bind(\"touchstart mousedown\", start);\n    }\n\n    function throttle(func, wait, debounce) {\n        var timeout;\n        return function () {\n            var context = this, args = arguments;\n            var throttler = function () {\n                timeout = null;\n                func.apply(context, args);\n            };\n            if (debounce) clearTimeout(timeout);\n            if (debounce || !timeout) timeout = setTimeout(throttler, wait);\n        };\n    }\n\n\n    function log(){/* jshint -W021 */if(window.console){if(Function.prototype.bind)log=Function.prototype.bind.call(console.log,console);else log=function(){Function.prototype.apply.call(console.log,console,arguments);};log.apply(this,arguments);}}\n\n    /**\n    * Define a jQuery plugin\n    */\n    var dataID = \"spectrum.id\";\n    $.fn.spectrum = function (opts, extra) {\n\n        if (typeof opts == \"string\") {\n\n            var returnValue = this;\n            var args = Array.prototype.slice.call( arguments, 1 );\n\n            this.each(function () {\n                var spect = spectrums[$(this).data(dataID)];\n                if (spect) {\n\n                    var method = spect[opts];\n                    if (!method) {\n                        throw new Error( \"Spectrum: no such method: '\" + opts + \"'\" );\n                    }\n\n                    if (opts == \"get\") {\n                        returnValue = spect.get();\n                    }\n                    else if (opts == \"container\") {\n                        returnValue = spect.container;\n                    }\n                    else if (opts == \"option\") {\n                        returnValue = spect.option.apply(spect, args);\n                    }\n                    else if (opts == \"destroy\") {\n                        spect.destroy();\n                        $(this).removeData(dataID);\n                    }\n                    else {\n                        method.apply(spect, args);\n                    }\n                }\n            });\n\n            return returnValue;\n        }\n\n        // Initializing a new instance of spectrum\n        return this.spectrum(\"destroy\").each(function () {\n            var spect = spectrum(this, opts);\n            $(this).data(dataID, spect.id);\n        });\n    };\n\n    $.fn.spectrum.load = true;\n    $.fn.spectrum.loadOpts = {};\n    $.fn.spectrum.draggable = draggable;\n    $.fn.spectrum.defaults = defaultOpts;\n\n    $.spectrum = { };\n    $.spectrum.localization = { };\n    $.spectrum.palettes = { };\n\n    $.fn.spectrum.processNativeColorInputs = function () {\n        if (!inputTypeColorSupport) {\n            $(\"input[type=color]\").spectrum({\n                preferredFormat: \"hex6\"\n            });\n        }\n    };\n\n    // TinyColor v0.9.16\n    // https://github.com/bgrins/TinyColor\n    // 2013-08-10, Brian Grinstead, MIT License\n\n    (function() {\n\n    var trimLeft = /^[\\s,#]+/,\n        trimRight = /\\s+$/,\n        tinyCounter = 0,\n        math = Math,\n        mathRound = math.round,\n        mathMin = math.min,\n        mathMax = math.max,\n        mathRandom = math.random;\n\n    function tinycolor (color, opts) {\n\n        color = (color) ? color : '';\n        opts = opts || { };\n\n        // If input is already a tinycolor, return itself\n        if (typeof color == \"object\" && color.hasOwnProperty(\"_tc_id\")) {\n           return color;\n        }\n\n        var rgb = inputToRGB(color);\n        var r = rgb.r,\n            g = rgb.g,\n            b = rgb.b,\n            a = rgb.a,\n            roundA = mathRound(100*a) / 100,\n            format = opts.format || rgb.format;\n\n        // Don't let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (r < 1) { r = mathRound(r); }\n        if (g < 1) { g = mathRound(g); }\n        if (b < 1) { b = mathRound(b); }\n\n        return {\n            ok: rgb.ok,\n            format: format,\n            _tc_id: tinyCounter++,\n            alpha: a,\n            getAlpha: function() {\n                return a;\n            },\n            setAlpha: function(value) {\n                a = boundAlpha(value);\n                roundA = mathRound(100*a) / 100;\n            },\n            toHsv: function() {\n                var hsv = rgbToHsv(r, g, b);\n                return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: a };\n            },\n            toHsvString: function() {\n                var hsv = rgbToHsv(r, g, b);\n                var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n                return (a == 1) ?\n                  \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n                  \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ roundA + \")\";\n            },\n            toHsl: function() {\n                var hsl = rgbToHsl(r, g, b);\n                return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: a };\n            },\n            toHslString: function() {\n                var hsl = rgbToHsl(r, g, b);\n                var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n                return (a == 1) ?\n                  \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n                  \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ roundA + \")\";\n            },\n            toHex: function(allow3Char) {\n                return rgbToHex(r, g, b, allow3Char);\n            },\n            toHexString: function(allow3Char) {\n                return '#' + rgbToHex(r, g, b, allow3Char);\n            },\n            toRgb: function() {\n                return { r: mathRound(r), g: mathRound(g), b: mathRound(b), a: a };\n            },\n            toRgbString: function() {\n                return (a == 1) ?\n                  \"rgb(\"  + mathRound(r) + \", \" + mathRound(g) + \", \" + mathRound(b) + \")\" :\n                  \"rgba(\" + mathRound(r) + \", \" + mathRound(g) + \", \" + mathRound(b) + \", \" + roundA + \")\";\n            },\n            toPercentageRgb: function() {\n                return { r: mathRound(bound01(r, 255) * 100) + \"%\", g: mathRound(bound01(g, 255) * 100) + \"%\", b: mathRound(bound01(b, 255) * 100) + \"%\", a: a };\n            },\n            toPercentageRgbString: function() {\n                return (a == 1) ?\n                  \"rgb(\"  + mathRound(bound01(r, 255) * 100) + \"%, \" + mathRound(bound01(g, 255) * 100) + \"%, \" + mathRound(bound01(b, 255) * 100) + \"%)\" :\n                  \"rgba(\" + mathRound(bound01(r, 255) * 100) + \"%, \" + mathRound(bound01(g, 255) * 100) + \"%, \" + mathRound(bound01(b, 255) * 100) + \"%, \" + roundA + \")\";\n            },\n            toName: function() {\n                if (a === 0) {\n                    return \"transparent\";\n                }\n\n                return hexNames[rgbToHex(r, g, b, true)] || false;\n            },\n            toFilter: function(secondColor) {\n                var hex = rgbToHex(r, g, b);\n                var secondHex = hex;\n                var alphaHex = Math.round(parseFloat(a) * 255).toString(16);\n                var secondAlphaHex = alphaHex;\n                var gradientType = opts && opts.gradientType ? \"GradientType = 1, \" : \"\";\n\n                if (secondColor) {\n                    var s = tinycolor(secondColor);\n                    secondHex = s.toHex();\n                    secondAlphaHex = Math.round(parseFloat(s.alpha) * 255).toString(16);\n                }\n\n                return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=#\" + pad2(alphaHex) + hex + \",endColorstr=#\" + pad2(secondAlphaHex) + secondHex + \")\";\n            },\n            toString: function(format) {\n                var formatSet = !!format;\n                format = format || this.format;\n\n                var formattedString = false;\n                var hasAlphaAndFormatNotSet = !formatSet && a < 1 && a > 0;\n                var formatWithAlpha = hasAlphaAndFormatNotSet && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\n\n                if (format === \"rgb\") {\n                    formattedString = this.toRgbString();\n                }\n                if (format === \"prgb\") {\n                    formattedString = this.toPercentageRgbString();\n                }\n                if (format === \"hex\" || format === \"hex6\") {\n                    formattedString = this.toHexString();\n                }\n                if (format === \"hex3\") {\n                    formattedString = this.toHexString(true);\n                }\n                if (format === \"name\") {\n                    formattedString = this.toName();\n                }\n                if (format === \"hsl\") {\n                    formattedString = this.toHslString();\n                }\n                if (format === \"hsv\") {\n                    formattedString = this.toHsvString();\n                }\n\n                if (formatWithAlpha) {\n                    return this.toRgbString();\n                }\n\n                return formattedString || this.toHexString();\n            }\n        };\n    }\n\n    // If input is an object, force 1 into \"1.0\" to handle ratios properly\n    // String input requires \"1.0\" as input, so 1 will be treated as 1\n    tinycolor.fromRatio = function(color, opts) {\n        if (typeof color == \"object\") {\n            var newColor = {};\n            for (var i in color) {\n                if (color.hasOwnProperty(i)) {\n                    if (i === \"a\") {\n                        newColor[i] = color[i];\n                    }\n                    else {\n                        newColor[i] = convertToPercentage(color[i]);\n                    }\n                }\n            }\n            color = newColor;\n        }\n\n        return tinycolor(color, opts);\n    };\n\n    // Given a string or object, convert that input to RGB\n    // Possible string inputs:\n    //\n    //     \"red\"\n    //     \"#f00\" or \"f00\"\n    //     \"#ff0000\" or \"ff0000\"\n    //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n    //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n    //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n    //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n    //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n    //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n    //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n    //\n    function inputToRGB(color) {\n\n        var rgb = { r: 0, g: 0, b: 0 };\n        var a = 1;\n        var ok = false;\n        var format = false;\n\n        if (typeof color == \"string\") {\n            color = stringInputToObject(color);\n        }\n\n        if (typeof color == \"object\") {\n            if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {\n                rgb = rgbToRgb(color.r, color.g, color.b);\n                ok = true;\n                format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n            }\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {\n                color.s = convertToPercentage(color.s);\n                color.v = convertToPercentage(color.v);\n                rgb = hsvToRgb(color.h, color.s, color.v);\n                ok = true;\n                format = \"hsv\";\n            }\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {\n                color.s = convertToPercentage(color.s);\n                color.l = convertToPercentage(color.l);\n                rgb = hslToRgb(color.h, color.s, color.l);\n                ok = true;\n                format = \"hsl\";\n            }\n\n            if (color.hasOwnProperty(\"a\")) {\n                a = color.a;\n            }\n        }\n\n        a = boundAlpha(a);\n\n        return {\n            ok: ok,\n            format: color.format || format,\n            r: mathMin(255, mathMax(rgb.r, 0)),\n            g: mathMin(255, mathMax(rgb.g, 0)),\n            b: mathMin(255, mathMax(rgb.b, 0)),\n            a: a\n        };\n    }\n\n\n    // Conversion Functions\n    // --------------------\n\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n    // `rgbToRgb`\n    // Handle bounds / percentage checking to conform to CSS color spec\n    // <http://www.w3.org/TR/css3-color/>\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\n    // *Returns:* { r, g, b } in [0, 255]\n    function rgbToRgb(r, g, b){\n        return {\n            r: bound01(r, 255) * 255,\n            g: bound01(g, 255) * 255,\n            b: bound01(b, 255) * 255\n        };\n    }\n\n    // `rgbToHsl`\n    // Converts an RGB color value to HSL.\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n    // *Returns:* { h, s, l } in [0,1]\n    function rgbToHsl(r, g, b) {\n\n        r = bound01(r, 255);\n        g = bound01(g, 255);\n        b = bound01(b, 255);\n\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\n        var h, s, l = (max + min) / 2;\n\n        if(max == min) {\n            h = s = 0; // achromatic\n        }\n        else {\n            var d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch(max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n\n            h /= 6;\n        }\n\n        return { h: h, s: s, l: l };\n    }\n\n    // `hslToRgb`\n    // Converts an HSL color value to RGB.\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n    // *Returns:* { r, g, b } in the set [0, 255]\n    function hslToRgb(h, s, l) {\n        var r, g, b;\n\n        h = bound01(h, 360);\n        s = bound01(s, 100);\n        l = bound01(l, 100);\n\n        function hue2rgb(p, q, t) {\n            if(t < 0) t += 1;\n            if(t > 1) t -= 1;\n            if(t < 1/6) return p + (q - p) * 6 * t;\n            if(t < 1/2) return q;\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n            return p;\n        }\n\n        if(s === 0) {\n            r = g = b = l; // achromatic\n        }\n        else {\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1/3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1/3);\n        }\n\n        return { r: r * 255, g: g * 255, b: b * 255 };\n    }\n\n    // `rgbToHsv`\n    // Converts an RGB color value to HSV\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n    // *Returns:* { h, s, v } in [0,1]\n    function rgbToHsv(r, g, b) {\n\n        r = bound01(r, 255);\n        g = bound01(g, 255);\n        b = bound01(b, 255);\n\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\n        var h, s, v = max;\n\n        var d = max - min;\n        s = max === 0 ? 0 : d / max;\n\n        if(max == min) {\n            h = 0; // achromatic\n        }\n        else {\n            switch(max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n        return { h: h, s: s, v: v };\n    }\n\n    // `hsvToRgb`\n    // Converts an HSV color value to RGB.\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n    // *Returns:* { r, g, b } in the set [0, 255]\n     function hsvToRgb(h, s, v) {\n\n        h = bound01(h, 360) * 6;\n        s = bound01(s, 100);\n        v = bound01(v, 100);\n\n        var i = math.floor(h),\n            f = h - i,\n            p = v * (1 - s),\n            q = v * (1 - f * s),\n            t = v * (1 - (1 - f) * s),\n            mod = i % 6,\n            r = [v, q, p, p, t, v][mod],\n            g = [t, v, v, q, p, p][mod],\n            b = [p, p, t, v, v, q][mod];\n\n        return { r: r * 255, g: g * 255, b: b * 255 };\n    }\n\n    // `rgbToHex`\n    // Converts an RGB color to hex\n    // Assumes r, g, and b are contained in the set [0, 255]\n    // Returns a 3 or 6 character hex\n    function rgbToHex(r, g, b, allow3Char) {\n\n        var hex = [\n            pad2(mathRound(r).toString(16)),\n            pad2(mathRound(g).toString(16)),\n            pad2(mathRound(b).toString(16))\n        ];\n\n        // Return a 3 character hex if possible\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n        }\n\n        return hex.join(\"\");\n    }\n\n    // `equals`\n    // Can be called with any tinycolor input\n    tinycolor.equals = function (color1, color2) {\n        if (!color1 || !color2) { return false; }\n        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n    };\n    tinycolor.random = function() {\n        return tinycolor.fromRatio({\n            r: mathRandom(),\n            g: mathRandom(),\n            b: mathRandom()\n        });\n    };\n\n\n    // Modification Functions\n    // ----------------------\n    // Thanks to less.js for some of the basics here\n    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n    tinycolor.desaturate = function (color, amount) {\n        amount = (amount === 0) ? 0 : (amount || 10);\n        var hsl = tinycolor(color).toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return tinycolor(hsl);\n    };\n    tinycolor.saturate = function (color, amount) {\n        amount = (amount === 0) ? 0 : (amount || 10);\n        var hsl = tinycolor(color).toHsl();\n        hsl.s += amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return tinycolor(hsl);\n    };\n    tinycolor.greyscale = function(color) {\n        return tinycolor.desaturate(color, 100);\n    };\n    tinycolor.lighten = function(color, amount) {\n        amount = (amount === 0) ? 0 : (amount || 10);\n        var hsl = tinycolor(color).toHsl();\n        hsl.l += amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return tinycolor(hsl);\n    };\n    tinycolor.darken = function (color, amount) {\n        amount = (amount === 0) ? 0 : (amount || 10);\n        var hsl = tinycolor(color).toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return tinycolor(hsl);\n    };\n    tinycolor.complement = function(color) {\n        var hsl = tinycolor(color).toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return tinycolor(hsl);\n    };\n\n\n    // Combination Functions\n    // ---------------------\n    // Thanks to jQuery xColor for some of the ideas behind these\n    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n    tinycolor.triad = function(color) {\n        var hsl = tinycolor(color).toHsl();\n        var h = hsl.h;\n        return [\n            tinycolor(color),\n            tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n            tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n        ];\n    };\n    tinycolor.tetrad = function(color) {\n        var hsl = tinycolor(color).toHsl();\n        var h = hsl.h;\n        return [\n            tinycolor(color),\n            tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n            tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n            tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n        ];\n    };\n    tinycolor.splitcomplement = function(color) {\n        var hsl = tinycolor(color).toHsl();\n        var h = hsl.h;\n        return [\n            tinycolor(color),\n            tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n            tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n        ];\n    };\n    tinycolor.analogous = function(color, results, slices) {\n        results = results || 6;\n        slices = slices || 30;\n\n        var hsl = tinycolor(color).toHsl();\n        var part = 360 / slices;\n        var ret = [tinycolor(color)];\n\n        for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(tinycolor(hsl));\n        }\n        return ret;\n    };\n    tinycolor.monochromatic = function(color, results) {\n        results = results || 6;\n        var hsv = tinycolor(color).toHsv();\n        var h = hsv.h, s = hsv.s, v = hsv.v;\n        var ret = [];\n        var modification = 1 / results;\n\n        while (results--) {\n            ret.push(tinycolor({ h: h, s: s, v: v}));\n            v = (v + modification) % 1;\n        }\n\n        return ret;\n    };\n\n\n    // Readability Functions\n    // ---------------------\n    // <http://www.w3.org/TR/AERT#color-contrast>\n\n    // `readability`\n    // Analyze the 2 colors and returns an object with the following properties:\n    //    `brightness`: difference in brightness between the two colors\n    //    `color`: difference in color/hue between the two colors\n    tinycolor.readability = function(color1, color2) {\n        var a = tinycolor(color1).toRgb();\n        var b = tinycolor(color2).toRgb();\n        var brightnessA = (a.r * 299 + a.g * 587 + a.b * 114) / 1000;\n        var brightnessB = (b.r * 299 + b.g * 587 + b.b * 114) / 1000;\n        var colorDiff = (\n            Math.max(a.r, b.r) - Math.min(a.r, b.r) +\n            Math.max(a.g, b.g) - Math.min(a.g, b.g) +\n            Math.max(a.b, b.b) - Math.min(a.b, b.b)\n        );\n\n        return {\n            brightness: Math.abs(brightnessA - brightnessB),\n            color: colorDiff\n        };\n    };\n\n    // `readable`\n    // http://www.w3.org/TR/AERT#color-contrast\n    // Ensure that foreground and background color combinations provide sufficient contrast.\n    // *Example*\n    //    tinycolor.readable(\"#000\", \"#111\") => false\n    tinycolor.readable = function(color1, color2) {\n        var readability = tinycolor.readability(color1, color2);\n        return readability.brightness > 125 && readability.color > 500;\n    };\n\n    // `mostReadable`\n    // Given a base color and a list of possible foreground or background\n    // colors for that base, returns the most readable color.\n    // *Example*\n    //    tinycolor.mostReadable(\"#123\", [\"#fff\", \"#000\"]) => \"#000\"\n    tinycolor.mostReadable = function(baseColor, colorList) {\n        var bestColor = null;\n        var bestScore = 0;\n        var bestIsReadable = false;\n        for (var i=0; i < colorList.length; i++) {\n\n            // We normalize both around the \"acceptable\" breaking point,\n            // but rank brightness constrast higher than hue.\n\n            var readability = tinycolor.readability(baseColor, colorList[i]);\n            var readable = readability.brightness > 125 && readability.color > 500;\n            var score = 3 * (readability.brightness / 125) + (readability.color / 500);\n\n            if ((readable && ! bestIsReadable) ||\n                (readable && bestIsReadable && score > bestScore) ||\n                ((! readable) && (! bestIsReadable) && score > bestScore)) {\n                bestIsReadable = readable;\n                bestScore = score;\n                bestColor = tinycolor(colorList[i]);\n            }\n        }\n        return bestColor;\n    };\n\n\n    // Big List of Colors\n    // ------------------\n    // <http://www.w3.org/TR/css3-color/#svg-color>\n    var names = tinycolor.names = {\n        aliceblue: \"f0f8ff\",\n        antiquewhite: \"faebd7\",\n        aqua: \"0ff\",\n        aquamarine: \"7fffd4\",\n        azure: \"f0ffff\",\n        beige: \"f5f5dc\",\n        bisque: \"ffe4c4\",\n        black: \"000\",\n        blanchedalmond: \"ffebcd\",\n        blue: \"00f\",\n        blueviolet: \"8a2be2\",\n        brown: \"a52a2a\",\n        burlywood: \"deb887\",\n        burntsienna: \"ea7e5d\",\n        cadetblue: \"5f9ea0\",\n        chartreuse: \"7fff00\",\n        chocolate: \"d2691e\",\n        coral: \"ff7f50\",\n        cornflowerblue: \"6495ed\",\n        cornsilk: \"fff8dc\",\n        crimson: \"dc143c\",\n        cyan: \"0ff\",\n        darkblue: \"00008b\",\n        darkcyan: \"008b8b\",\n        darkgoldenrod: \"b8860b\",\n        darkgray: \"a9a9a9\",\n        darkgreen: \"006400\",\n        darkgrey: \"a9a9a9\",\n        darkkhaki: \"bdb76b\",\n        darkmagenta: \"8b008b\",\n        darkolivegreen: \"556b2f\",\n        darkorange: \"ff8c00\",\n        darkorchid: \"9932cc\",\n        darkred: \"8b0000\",\n        darksalmon: \"e9967a\",\n        darkseagreen: \"8fbc8f\",\n        darkslateblue: \"483d8b\",\n        darkslategray: \"2f4f4f\",\n        darkslategrey: \"2f4f4f\",\n        darkturquoise: \"00ced1\",\n        darkviolet: \"9400d3\",\n        deeppink: \"ff1493\",\n        deepskyblue: \"00bfff\",\n        dimgray: \"696969\",\n        dimgrey: \"696969\",\n        dodgerblue: \"1e90ff\",\n        firebrick: \"b22222\",\n        floralwhite: \"fffaf0\",\n        forestgreen: \"228b22\",\n        fuchsia: \"f0f\",\n        gainsboro: \"dcdcdc\",\n        ghostwhite: \"f8f8ff\",\n        gold: \"ffd700\",\n        goldenrod: \"daa520\",\n        gray: \"808080\",\n        green: \"008000\",\n        greenyellow: \"adff2f\",\n        grey: \"808080\",\n        honeydew: \"f0fff0\",\n        hotpink: \"ff69b4\",\n        indianred: \"cd5c5c\",\n        indigo: \"4b0082\",\n        ivory: \"fffff0\",\n        khaki: \"f0e68c\",\n        lavender: \"e6e6fa\",\n        lavenderblush: \"fff0f5\",\n        lawngreen: \"7cfc00\",\n        lemonchiffon: \"fffacd\",\n        lightblue: \"add8e6\",\n        lightcoral: \"f08080\",\n        lightcyan: \"e0ffff\",\n        lightgoldenrodyellow: \"fafad2\",\n        lightgray: \"d3d3d3\",\n        lightgreen: \"90ee90\",\n        lightgrey: \"d3d3d3\",\n        lightpink: \"ffb6c1\",\n        lightsalmon: \"ffa07a\",\n        lightseagreen: \"20b2aa\",\n        lightskyblue: \"87cefa\",\n        lightslategray: \"789\",\n        lightslategrey: \"789\",\n        lightsteelblue: \"b0c4de\",\n        lightyellow: \"ffffe0\",\n        lime: \"0f0\",\n        limegreen: \"32cd32\",\n        linen: \"faf0e6\",\n        magenta: \"f0f\",\n        maroon: \"800000\",\n        mediumaquamarine: \"66cdaa\",\n        mediumblue: \"0000cd\",\n        mediumorchid: \"ba55d3\",\n        mediumpurple: \"9370db\",\n        mediumseagreen: \"3cb371\",\n        mediumslateblue: \"7b68ee\",\n        mediumspringgreen: \"00fa9a\",\n        mediumturquoise: \"48d1cc\",\n        mediumvioletred: \"c71585\",\n        midnightblue: \"191970\",\n        mintcream: \"f5fffa\",\n        mistyrose: \"ffe4e1\",\n        moccasin: \"ffe4b5\",\n        navajowhite: \"ffdead\",\n        navy: \"000080\",\n        oldlace: \"fdf5e6\",\n        olive: \"808000\",\n        olivedrab: \"6b8e23\",\n        orange: \"ffa500\",\n        orangered: \"ff4500\",\n        orchid: \"da70d6\",\n        palegoldenrod: \"eee8aa\",\n        palegreen: \"98fb98\",\n        paleturquoise: \"afeeee\",\n        palevioletred: \"db7093\",\n        papayawhip: \"ffefd5\",\n        peachpuff: \"ffdab9\",\n        peru: \"cd853f\",\n        pink: \"ffc0cb\",\n        plum: \"dda0dd\",\n        powderblue: \"b0e0e6\",\n        purple: \"800080\",\n        red: \"f00\",\n        rosybrown: \"bc8f8f\",\n        royalblue: \"4169e1\",\n        saddlebrown: \"8b4513\",\n        salmon: \"fa8072\",\n        sandybrown: \"f4a460\",\n        seagreen: \"2e8b57\",\n        seashell: \"fff5ee\",\n        sienna: \"a0522d\",\n        silver: \"c0c0c0\",\n        skyblue: \"87ceeb\",\n        slateblue: \"6a5acd\",\n        slategray: \"708090\",\n        slategrey: \"708090\",\n        snow: \"fffafa\",\n        springgreen: \"00ff7f\",\n        steelblue: \"4682b4\",\n        tan: \"d2b48c\",\n        teal: \"008080\",\n        thistle: \"d8bfd8\",\n        tomato: \"ff6347\",\n        turquoise: \"40e0d0\",\n        violet: \"ee82ee\",\n        wheat: \"f5deb3\",\n        white: \"fff\",\n        whitesmoke: \"f5f5f5\",\n        yellow: \"ff0\",\n        yellowgreen: \"9acd32\"\n    };\n\n    // Make it easy to access colors via `hexNames[hex]`\n    var hexNames = tinycolor.hexNames = flip(names);\n\n\n    // Utilities\n    // ---------\n\n    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n    function flip(o) {\n        var flipped = { };\n        for (var i in o) {\n            if (o.hasOwnProperty(i)) {\n                flipped[o[i]] = i;\n            }\n        }\n        return flipped;\n    }\n\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\n    function boundAlpha(a) {\n        a = parseFloat(a);\n\n        if (isNaN(a) || a < 0 || a > 1) {\n            a = 1;\n        }\n\n        return a;\n    }\n\n    // Take input from [0, n] and return it as [0, 1]\n    function bound01(n, max) {\n        if (isOnePointZero(n)) { n = \"100%\"; }\n\n        var processPercent = isPercentage(n);\n        n = mathMin(max, mathMax(0, parseFloat(n)));\n\n        // Automatically convert percentage into number\n        if (processPercent) {\n            n = parseInt(n * max, 10) / 100;\n        }\n\n        // Handle floating point rounding errors\n        if ((math.abs(n - max) < 0.000001)) {\n            return 1;\n        }\n\n        // Convert into [0, 1] range if it isn't already\n        return (n % max) / parseFloat(max);\n    }\n\n    // Force a number between 0 and 1\n    function clamp01(val) {\n        return mathMin(1, mathMax(0, val));\n    }\n\n    // Parse an integer into hex\n    function parseHex(val) {\n        return parseInt(val, 16);\n    }\n\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n    function isOnePointZero(n) {\n        return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n    }\n\n    // Check to see if string passed in is a percentage\n    function isPercentage(n) {\n        return typeof n === \"string\" && n.indexOf('%') != -1;\n    }\n\n    // Force a hex value to have 2 characters\n    function pad2(c) {\n        return c.length == 1 ? '0' + c : '' + c;\n    }\n\n    // Replace a decimal with it's percentage value\n    function convertToPercentage(n) {\n        if (n <= 1) {\n            n = (n * 100) + \"%\";\n        }\n\n        return n;\n    }\n\n    var matchers = (function() {\n\n        // <http://www.w3.org/TR/css3-values/#integers>\n        var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n        // <http://www.w3.org/TR/css3-values/#number-value>\n        var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n        var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n        // Actual matching.\n        // Parentheses and commas are optional, but not required.\n        // Whitespace can take the place of commas or opening paren\n        var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n        var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n        return {\n            rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n            rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n            hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n            hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n            hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n        };\n    })();\n\n    // `stringInputToObject`\n    // Permissive string parsing.  Take in a number of formats, and output an object\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n    function stringInputToObject(color) {\n\n        color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n        var named = false;\n        if (names[color]) {\n            color = names[color];\n            named = true;\n        }\n        else if (color == 'transparent') {\n            return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n        }\n\n        // Try to match string input using regular expressions.\n        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n        // Just return an object and let the conversion functions handle that.\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\n        var match;\n        if ((match = matchers.rgb.exec(color))) {\n            return { r: match[1], g: match[2], b: match[3] };\n        }\n        if ((match = matchers.rgba.exec(color))) {\n            return { r: match[1], g: match[2], b: match[3], a: match[4] };\n        }\n        if ((match = matchers.hsl.exec(color))) {\n            return { h: match[1], s: match[2], l: match[3] };\n        }\n        if ((match = matchers.hsla.exec(color))) {\n            return { h: match[1], s: match[2], l: match[3], a: match[4] };\n        }\n        if ((match = matchers.hsv.exec(color))) {\n            return { h: match[1], s: match[2], v: match[3] };\n        }\n        if ((match = matchers.hex6.exec(color))) {\n            return {\n                r: parseHex(match[1]),\n                g: parseHex(match[2]),\n                b: parseHex(match[3]),\n                format: named ? \"name\" : \"hex\"\n            };\n        }\n        if ((match = matchers.hex3.exec(color))) {\n            return {\n                r: parseHex(match[1] + '' + match[1]),\n                g: parseHex(match[2] + '' + match[2]),\n                b: parseHex(match[3] + '' + match[3]),\n                format: named ? \"name\" : \"hex\"\n            };\n        }\n\n        return false;\n    }\n\n    // Expose tinycolor to window, does not need to run in non-browser context.\n    window.tinycolor = tinycolor;\n\n    })();\n\n\n    $(function () {\n        if ($.fn.spectrum.load) {\n            $.fn.spectrum.processNativeColorInputs();\n        }\n    });\n\n})(window, jQuery);\n"}